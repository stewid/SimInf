[{"path":[]},{"path":"http://stewid.github.io/SimInf/articles/post-process-data.html","id":"extract-trajectory-data-with-trajectory","dir":"Articles","previous_headings":"","what":"Extract trajectory data with trajectory()","title":"Post-process data in a trajectory","text":"modelling simulation studies require custom data analysis simulation data generated. support , SimInf provides trajectory() method obtain data.frame number individuals compartment time points specified tspan. Let’s simulate 10 days data SIR model 6 nodes. reproducibility, first call set.seed() function specify number threads use simulation. Extract number individuals compartment time-points tspan. Extract number recovered individuals first node. Extract number recovered individuals first third node. Consult help page trajectory() parameter options.","code":"library(SimInf)  set.seed(123) set_num_threads(1)  u0 <- data.frame(S = c(100, 101, 102, 103, 104, 105),                  I = c(1, 2, 3, 4, 5, 6),                  R = c(0, 0, 0, 0, 0, 0))  model  <- SIR(u0 = u0,               tspan = 1:10,               beta = 0.16,               gamma = 0.077)  result <- run(model) trajectory(result) ##    node time   S  I R ## 1     1    1 100  1 0 ## 2     2    1 101  2 0 ## 3     3    1 102  3 0 ## 4     4    1 102  5 0 ## 5     5    1 103  6 0 ## 6     6    1 105  6 0 ## 7     1    2 100  1 0 ## 8     2    2 101  2 0 ## 9     3    2 101  4 0 ## 10    4    2 101  5 1 ## 11    5    2 103  6 0 ## 12    6    2 105  6 0 ## 13    1    3  99  2 0 ## 14    2    3 101  2 0 ## 15    3    3 101  4 0 ## 16    4    3  99  6 2 ## 17    5    3 101  8 0 ## 18    6    3 103  7 1 ## 19    1    4  98  3 0 ## 20    2    4 101  2 0 ## 21    3    4 101  4 0 ## 22    4    4  98  6 3 ## 23    5    4  99 10 0 ## 24    6    4 101  8 2 ## 25    1    5  98  3 0 ## 26    2    5 101  2 0 ## 27    3    5 100  5 0 ## 28    4    5  97  6 4 ## 29    5    5  98  9 2 ## 30    6    5 101  6 4 ## 31    1    6  98  2 1 ## 32    2    6 101  2 0 ## 33    3    6 100  5 0 ## 34    4    6  97  5 5 ## 35    5    6  98  8 3 ## 36    6    6 100  7 4 ## 37    1    7  98  2 1 ## 38    2    7  98  5 0 ## 39    3    7 100  5 0 ## 40    4    7  92 10 5 ## 41    5    7  98  7 4 ## 42    6    7  99  8 4 ## 43    1    8  97  3 1 ## 44    2    8  98  5 0 ## 45    3    8  98  6 1 ## 46    4    8  92  8 7 ## 47    5    8  95 10 4 ## 48    6    8  99  8 4 ## 49    1    9  97  3 1 ## 50    2    9  97  6 0 ## 51    3    9  98  4 3 ## 52    4    9  91  9 7 ## 53    5    9  94 10 5 ## 54    6    9  99  7 5 ## 55    1   10  97  3 1 ## 56    2   10  96  6 1 ## 57    3   10  98  4 3 ## 58    4   10  89 11 7 ## 59    5   10  93  9 7 ## 60    6   10  98  8 5 trajectory(result, compartments = \"R\", index = 1) ##    node time R ## 1     1    1 0 ## 2     1    2 0 ## 3     1    3 0 ## 4     1    4 0 ## 5     1    5 0 ## 6     1    6 1 ## 7     1    7 1 ## 8     1    8 1 ## 9     1    9 1 ## 10    1   10 1 trajectory(result, compartments = \"R\", index = c(1, 3)) ##    node time R ## 1     1    1 0 ## 2     3    1 0 ## 3     1    2 0 ## 4     3    2 0 ## 5     1    3 0 ## 6     3    3 0 ## 7     1    4 0 ## 8     3    4 0 ## 9     1    5 0 ## 10    3    5 0 ## 11    1    6 1 ## 12    3    6 0 ## 13    1    7 1 ## 14    3    7 0 ## 15    1    8 1 ## 16    3    8 1 ## 17    1    9 1 ## 18    3    9 3 ## 19    1   10 1 ## 20    3   10 3"},{"path":"http://stewid.github.io/SimInf/articles/post-process-data.html","id":"calculate-prevalence-from-a-trajectory-using-prevalence","dir":"Articles","previous_headings":"","what":"Calculate prevalence from a trajectory using prevalence()","title":"Post-process data in a trajectory","text":"Use prevalence function calculate proportion individuals disease population. prevalence() function takes model object formula specification, left-hand-side formula specifies compartments representing cases .e. attribute disease. right-hand-side formula specifies compartments risk. Let’s use previously simulated data determine proportion infected individuals population time-points tspan. Identical result obtained shorthand ‘~ .’ prevalence function argument level default level = 1. returns prevalence whole population level. Since several nodes (farms like) model now, can also ask proportion nodes infected individuals specifying level = 2. Finally, may wish know proportion infected individuals within node level = 3. Consult help page prevalence() parameter options.","code":"prevalence(result, I ~ S + I + R) ##    time prevalence ## 1     1 0.03616352 ## 2     2 0.03773585 ## 3     3 0.04559748 ## 4     4 0.05188679 ## 5     5 0.04874214 ## 6     6 0.04559748 ## 7     7 0.05817610 ## 8     8 0.06289308 ## 9     9 0.06132075 ## 10   10 0.06446541 prevalence(result, I ~ .) ##    time prevalence ## 1     1 0.03616352 ## 2     2 0.03773585 ## 3     3 0.04559748 ## 4     4 0.05188679 ## 5     5 0.04874214 ## 6     6 0.04559748 ## 7     7 0.05817610 ## 8     8 0.06289308 ## 9     9 0.06132075 ## 10   10 0.06446541 prevalence(result, I ~ S + I + R, level = 2) ##    time prevalence ## 1     1          1 ## 2     2          1 ## 3     3          1 ## 4     4          1 ## 5     5          1 ## 6     6          1 ## 7     7          1 ## 8     8          1 ## 9     9          1 ## 10   10          1 prevalence(result, I ~ S + I + R, level = 3) ##    node time prevalence ## 1     1    1 0.00990099 ## 2     2    1 0.01941748 ## 3     3    1 0.02857143 ## 4     4    1 0.04672897 ## 5     5    1 0.05504587 ## 6     6    1 0.05405405 ## 7     1    2 0.00990099 ## 8     2    2 0.01941748 ## 9     3    2 0.03809524 ## 10    4    2 0.04672897 ## 11    5    2 0.05504587 ## 12    6    2 0.05405405 ## 13    1    3 0.01980198 ## 14    2    3 0.01941748 ## 15    3    3 0.03809524 ## 16    4    3 0.05607477 ## 17    5    3 0.07339450 ## 18    6    3 0.06306306 ## 19    1    4 0.02970297 ## 20    2    4 0.01941748 ## 21    3    4 0.03809524 ## 22    4    4 0.05607477 ## 23    5    4 0.09174312 ## 24    6    4 0.07207207 ## 25    1    5 0.02970297 ## 26    2    5 0.01941748 ## 27    3    5 0.04761905 ## 28    4    5 0.05607477 ## 29    5    5 0.08256881 ## 30    6    5 0.05405405 ## 31    1    6 0.01980198 ## 32    2    6 0.01941748 ## 33    3    6 0.04761905 ## 34    4    6 0.04672897 ## 35    5    6 0.07339450 ## 36    6    6 0.06306306 ## 37    1    7 0.01980198 ## 38    2    7 0.04854369 ## 39    3    7 0.04761905 ## 40    4    7 0.09345794 ## 41    5    7 0.06422018 ## 42    6    7 0.07207207 ## 43    1    8 0.02970297 ## 44    2    8 0.04854369 ## 45    3    8 0.05714286 ## 46    4    8 0.07476636 ## 47    5    8 0.09174312 ## 48    6    8 0.07207207 ## 49    1    9 0.02970297 ## 50    2    9 0.05825243 ## 51    3    9 0.03809524 ## 52    4    9 0.08411215 ## 53    5    9 0.09174312 ## 54    6    9 0.06306306 ## 55    1   10 0.02970297 ## 56    2   10 0.05825243 ## 57    3   10 0.03809524 ## 58    4   10 0.10280374 ## 59    5   10 0.08256881 ## 60    6   10 0.07207207"},{"path":"http://stewid.github.io/SimInf/articles/post-process-data.html","id":"visualize-a-trajectory-with-plot","dir":"Articles","previous_headings":"","what":"Visualize a trajectory with plot()","title":"Post-process data in a trajectory","text":"plot() function another useful way inspecting outcome trajectory. can display either median quantile range counts nodes, plot counts specified nodes, prevalence. examples using plot() function. Plot median interquartile range number susceptible, infected recovered individuals.  Plot median middle 95% quantile range number susceptible, infected recovered individuals.  Plot median interquartile range number infected individuals.  Use formula notation instead plot median interquartile range number infected individuals.  Plot number susceptible, infected recovered individuals first three nodes.  Use plot type line instead.  Plot number infected individuals first node.  Plot proportion infected individuals (cases) population.  Plot proportion nodes infected individuals.  Plot median interquartile range proportion infected individuals node  Plot proportion infected individuals first three nodes.  Please run couple plot(run(model)) view stochasticity trajectories. find help SimInf plot function model object run:","code":"plot(result) plot(result, range = 0.95) plot(result, \"I\") plot(result, ~I) plot(result, index = 1:3, range = FALSE) plot(result, index = 1:3, range = FALSE, type = \"l\") plot(result, \"I\", index = 1, range = FALSE) plot(result, I ~ S + I + R) plot(result, I ~ S + I + R, level = 2) plot(result, I ~ S + I + R, level = 3) plot(result, I ~ S + I + R, level = 3, index = 1:3, range = FALSE) help(\"plot,SimInf_model-method\", package = \"SimInf\")"},{"path":"http://stewid.github.io/SimInf/articles/scheduled-events.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Scheduled events","text":"vignette describes births, deaths movements can incorporated model scheduled events predefined time-points. Events can, example, used simulate disese spread among multiple subpopulations (e.g., farms) individuals can move subpopulations thus transfer infection, see Figure 1. SimInf, use node denote subpopulation. ~ Figure 1. Illustration movements nodes. time step depicts movements one time unit, example, day. network N=4 nodes node 1 infected nodes 2–4 non-infected. Arrows indicate movements individuals source node destination node labels denote size shipment. , infection may spread node 1 node 3 t=2 node 3 node 2 t=3.","code":""},{"path":"http://stewid.github.io/SimInf/articles/scheduled-events.html","id":"a-first-example","dir":"Articles","previous_headings":"","what":"A first example","title":"Scheduled events","text":"Let us define 6 movement events Figure 1 include SIR model. data.frame, contains movements. Interpret follows: time step 1 move 9 individuals node 3 node 2 time step 1 move 2 individuals node 3 node 4 time step 2 move 8 individuals node 1 node 3 time step 2 move 3 individuals node 4 node 3 time step 3 move 5 individuals node 3 node 2 time step 3 move 4 individuals node 4 node 2 look data.frame Now, create SIR model turn disease dynamics (beta=0, gamma=0) focus scheduled events. Let us start different number individuals node. compartments event operates , controlled select value specified event together model select matrix (E). row E corresponds one compartment model, non-zero entries column indicate compartments sample individuals processing event. column use E event determined event select value. example, use 4th column means compartments can sampled movement event (see ). another case might interested targeting susceptibles, means model select first column. Now, let us run model generate data . reproducibility, first call set.seed() function specify number threads use since random sampling involved picking inviduals compartments. plot (Figure 2) number individuals node. Figure 2. Number susceptible, infected recovered individuals node. ~ use trajectory() function easily inspect outcome node detail.","code":"events <- data.frame(   event      = rep(\"extTrans\", 6),  ## Event \"extTrans\" is                                     ##  a movement between nodes   time       = c(1, 1, 2, 2, 3, 3), ## The time that the event happens   node       = c(3, 3, 1, 4, 3, 4), ## In which node does the event occur   dest       = c(4, 2, 3, 3, 2, 2), ## Which node is the destination node   n          = c(9, 2, 8, 3, 5, 4), ## How many individuals are moved   proportion = c(0, 0, 0, 0, 0, 0), ## This is not used when n > 0   select     = c(4, 4, 4, 4, 4, 4), ## Use the 4th column in                                     ## the model select matrix   shift      = c(0, 0, 0, 0, 0, 0)) ## Not used in this example events ##      event time node dest n proportion select shift ## 1 extTrans    1    3    4 9          0      4     0 ## 2 extTrans    1    3    2 2          0      4     0 ## 3 extTrans    2    1    3 8          0      4     0 ## 4 extTrans    2    4    3 3          0      4     0 ## 5 extTrans    3    3    2 5          0      4     0 ## 6 extTrans    3    4    2 4          0      4     0 library(SimInf)  model <- SIR(u0 = data.frame(S = c(10, 15, 20, 25),                              I = c(5,  0,  0,  0),                              R = c(0,  0,  0,  0)),              tspan = 0:3,              beta = 0,              gamma = 0,              events = events) model@events@E ## 3 x 4 sparse Matrix of class \"dgCMatrix\" ##   1 2 3 4 ## S 1 . . 1 ## I . 1 . 1 ## R . . 1 1 set.seed(1) set_num_threads(1) result <- run(model) plot(result, range = FALSE) trajectory(result) ##    node time  S I R ## 1     1    0 10 5 0 ## 2     2    0 15 0 0 ## 3     3    0 20 0 0 ## 4     4    0 25 0 0 ## 5     1    1 10 5 0 ## 6     2    1 17 0 0 ## 7     3    1  9 0 0 ## 8     4    1 34 0 0 ## 9     1    2  6 1 0 ## 10    2    2 17 0 0 ## 11    3    2 16 4 0 ## 12    4    2 31 0 0 ## 13    1    3  6 1 0 ## 14    2    3 25 1 0 ## 15    3    3 12 3 0 ## 16    4    3 27 0 0"},{"path":"http://stewid.github.io/SimInf/articles/scheduled-events.html","id":"varying-probability-of-picking-individuals","dir":"Articles","previous_headings":"","what":"Varying probability of picking individuals","title":"Scheduled events","text":"possible assign different probabillities compartments event sample individuals . weights select matrix EE non-identical, individuals sampled biased urn. illustrate , let us create movement events two nodes built-SIR model, start 300 individuals (S=100S = 100, =100I = 100, R=100R = 100) first node move , one one, second node. Now, create model. run , plot number individuals second node. Figure 3. individuals equal probability selected regardless compartment. ~ probability sample individual compartment pS=wS*SwS*S+wI*+wR*R p_S = \\frac{w_S * S}{w_S * S + w_I * + w_R * R} pI=wI*IwS*S+wI*+wR*R p_I = \\frac{w_I * }{w_S * S + w_I * + w_R * R} pR=wR*RwS*S+wI*+wR*R p_R = \\frac{w_R * R}{w_S * S + w_I * + w_R * R} wSw_S, wIw_I wRw_R weights E. probabilities applied sequentially, probability choosing next item proportional weights amongst remaining items. Let us now double weight sample individuals II compartment run model . Figure 4. individuals II compartment likely selected movement event. ~ much larger weight sample individuals II compartment. Figure 5. individuals II compartment even likely selected movement event compared previous example. ~ Increase weight RR compartment run model . Figure 6. individuals II RR compartments likely selected movement event compared individuals SS compartment.","code":"u0 <- data.frame(S = c(100, 0),                  I = c(100, 0),                  R = c(100, 0)) events <- data.frame(   event = rep(\"extTrans\", 300), ## Event \"extTrans\" is a movement between nodes   time = 1:300,                 ## The time that the event happens   node = 1,                     ## In which node does the event occur   dest = 2,                     ## Which node is the destination node   n = 1,                        ## How many individuals are moved   proportion = 0,               ## This is not used when n > 0   select = 4,                   ## Use the 4th column in the model select matrix   shift = 0)                    ## Not used in this example model <- SIR(u0 = u0,              tspan = 1:300,              events = events,              beta = 0,              gamma = 0) plot(run(model), index = 2) model@events@E[2, 4] <- 2 plot(run(model), index = 2) model@events@E[2, 4] <- 10 plot(run(model), index = 2) model@events@E[3, 4] <- 4 plot(run(model), index = 2)"},{"path":"http://stewid.github.io/SimInf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Widgren. Author, maintainer. Robin Eriksson. Author. Stefan Engblom. Author. Pavol Bauer. Author. Thomas Rosendal. Contributor. Ivana Rodriguez Ewerlöf. Contributor. Attractive Chaos. Copyright holder.           Author 'kvec.h'.","code":""},{"path":"http://stewid.github.io/SimInf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Widgren S, Bauer P, Eriksson R, Engblom S (2019). “SimInf: R Package Data-Driven Stochastic Disease Spread Simulations.” Journal Statistical Software, 91(12), 1–42. doi:10.18637/jss.v091.i12.","code":"@Article{,   title = {{SimInf}: An {R} Package for Data-Driven Stochastic Disease Spread Simulations},   author = {Stefan Widgren and Pavol Bauer and Robin Eriksson and Stefan Engblom},   journal = {Journal of Statistical Software},   year = {2019},   volume = {91},   number = {12},   pages = {1--42},   doi = {10.18637/jss.v091.i12}, }"},{"path":"http://stewid.github.io/SimInf/index.html","id":"siminf","dir":"","previous_headings":"","what":"A Framework for Data-Driven Stochastic Disease Spread Simulations","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"package provides efficient flexible framework conduct data-driven epidemiological modeling realistic large scale disease spread simulations. framework integrates infection dynamics subpopulations continuous-time Markov chains using Gillespie stochastic simulation algorithm incorporates available data births, deaths movements scheduled events predefined time-points. Using C code numerical solvers ‘OpenMP’ (available) divide work multiple processors ensures high performance simulating sample outcome. One design goals make package extendable enable usage numerical solvers R extension packages order facilitate complex epidemiological research. package contains template models can extended user-defined models.","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"can use one predefined compartment models SimInf, example, SEIR. can also define custom model ‘fly’ using model parser method mparse. method takes character vector transitions form X -> propensity -> Y automatically generates C R code model. left hand side first arrow (->) initial state, right hand side last arrow (->) final state, propensity written two arrows. flexibility mparse approach allows quick prototyping new models features. illustrate mparse functionality, let us consider SIR model closed population .e., births deaths. Let beta denote transmission rate spread susceptible individual infectious individual gamma recovery rate infection (gamma = 1 / average duration infection). also possible define variables can used calculations propensities calculations variables. variable defined operator <-. Using variable size population, SIR model can described : transitions compartments variables together constants beta gamma can now used generate model mparse. model also needs initialised initial condition u0 tspan, vector time points state system returned. Let us create model consists 1000 replicates population, denoted node SimInf, starts 99 susceptibles, 5 infected 0 recovered individuals. generate data model print basic information outcome, run following commands: several functions SimInf facilitate analysis post-processing simulated data, example, trajectory, prevalence plot. default plot display median count compartment across nodes colored line together inter-quartile range using color, transparency. modeling simulation studies require custom data analysis simulation data generated. support , SimInf provides trajectory method obtain data.frame number individuals compartment time points specified tspan. first 10 lines data.frame simulated data. Finally, let us use prevalence method explore proportion infected individuals across nodes. takes model object formula specification, left hand side formula specifies compartments representing cases .e., attribute disease right hand side formula specifies compartments risk. first 10 lines data.frame.","code":"library(SimInf)  transitions <- c(\"S -> beta*S*I/N -> I\",                  \"I -> gamma*I -> R\",                  \"N <- S+I+R\") compartments <- c(\"S\", \"I\", \"R\") n <- 1000 u0 <- data.frame(S = rep(99, n), I = rep(5, n), R = rep(0, n))  model <- mparse(transitions = transitions,                 compartments = compartments,                 gdata = c(beta = 0.16, gamma = 0.077),                 u0 = u0,                 tspan = 1:150) result <- run(model) result #> Model: SimInf_model #> Number of nodes: 1000 #> Number of transitions: 2 #> Number of scheduled events: 0 #> #> Global data #> ----------- #>  Parameter Value #>  beta      0.160 #>  gamma     0.077 #> #> Compartments #> ------------ #>      Min. 1st Qu. Median   Mean 3rd Qu.   Max. #>  S   1.00   19.00  30.00  40.74   60.00  99.00 #>  I   0.00    0.00   4.00   6.87   11.00  47.00 #>  R   0.00   28.00  67.00  56.39   83.00 103.00 plot(result) trajectory(result) #>    node time  S I R #> 1     1    1 98 6 0 #> 2     2    1 98 6 0 #> 3     3    1 98 6 0 #> 4     4    1 99 5 0 #> 5     5    1 97 7 0 #> 6     6    1 98 5 1 #> 7     7    1 99 5 0 #> 8     8    1 99 5 0 #> 9     9    1 97 7 0 #> 10   10    1 97 6 1 ... prevalence(result, I ~ S + I + R) #>    time prevalence #> 1     1 0.05196154 #> 2     2 0.05605769 #> 3     3 0.06059615 #> 4     4 0.06516346 #> 5     5 0.06977885 #> 6     6 0.07390385 #> 7     7 0.07856731 #> 8     8 0.08311538 #> 9     9 0.08794231 #> 10   10 0.09321154 ..."},{"path":"http://stewid.github.io/SimInf/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"See vignette learn special features SimInf R package provides, example, : use continuous state variables use SimInf framework another R package incorporate available data births, deaths movements scheduled events predefined time-points.","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"can install released version SimInf CRAN use remotes package install development version GitHub refer section 3.1 vignette detailed installation instructions.","code":"install.packages(\"SimInf\") library(remotes) install_github(\"stewid/SimInf\")"},{"path":"http://stewid.github.io/SimInf/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"alphabetical order: Pavol Bauer , Robin Eriksson , Stefan Engblom , Stefan Widgren  (Maintainer) suggestions, bug reports, forks pull requests appreciated. Get touch.","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"SimInf research software. cite SimInf publications, please use: Widgren S, Bauer P, Eriksson R, Engblom S (2019) SimInf: R Package Data-Driven Stochastic Disease Spread Simulations. Journal Statistical Software, 91(12), 1–42. doi: 10.18637/jss.v091.i12 Bauer P, Engblom S, Widgren S (2016) Fast event-based epidemiological simulations national scales. International Journal High Performance Computing Applications, 30(4), 438–453. doi: 10.1177/1094342016635723","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"software made possible support Swedish Research Council within UPMARC Linnaeus center Excellence (Pavol Bauer, Robin Eriksson, Stefan Engblom), Swedish Research Council Formas (Stefan Engblom Stefan Widgren), Swedish Board Agriculture (Stefan Widgren), Swedish strategic research program eSSENCE (Stefan Widgren), framework Full Force project, supported funding European Union’s Horizon 2020 Research Innovation programme grant agreement 773830: One Health European Joint Programme (Stefan Widgren).","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"SimInf package uses semantic versioning.","code":""},{"path":"http://stewid.github.io/SimInf/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations","text":"SimInf package licensed GPLv3.","code":""},{"path":"http://stewid.github.io/SimInf/reference/C_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the C code from a SimInf_model object — C_code","title":"Extract the C code from a SimInf_model object — C_code","text":"Extract C code SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/C_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the C code from a SimInf_model object — C_code","text":"","code":"C_code(model)"},{"path":"http://stewid.github.io/SimInf/reference/C_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the C code from a SimInf_model object — C_code","text":"model SimInf_model object extract C code .","code":""},{"path":"http://stewid.github.io/SimInf/reference/C_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the C code from a SimInf_model object — C_code","text":"Character vector C code model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/C_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the C code from a SimInf_model object — C_code","text":"","code":"## Use the model parser to create a 'SimInf_model' object that ## expresses an SIR model, where 'b' is the transmission rate and ## 'g' is the recovery rate. model <- mparse(transitions = c(\"S -> b*S*I/(S+I+R) -> I\", \"I -> g*I -> R\"),                 compartments = c(\"S\", \"I\", \"R\"),                 gdata = c(b = 0.16, g = 0.077),                 u0 = data.frame(S = 99, I = 1, R = 0),                 tspan = 1:10)  ## View the C code. C_code(model) #>   [1] \"/* Generated by SimInf (v9.8.1.9000) */\"                             #>   [2] \"\"                                                                    #>   [3] \"#include <R_ext/Rdynload.h>\"                                         #>   [4] \"#include \\\"SimInf.h\\\"\"                                               #>   [5] \"\"                                                                    #>   [6] \"/**\"                                                                 #>   [7] \" * Make sure the necessary macros are defined so that the\"           #>   [8] \" * compiler can replace them when compiling the model.\"              #>   [9] \" * 'SIMINF_MODEL_RUN' defines the function name of the function\"     #>  [10] \" * that will be called from R to run a trajectory of the model.\"     #>  [11] \" * 'SIMINF_R_INIT' is the name of the function that R will call\"     #>  [12] \" * when this model is loaded into R. 'SIMINF_FORCE_SYMBOLS'\"         #>  [13] \" * defines whether R allows the entry point for the run function\"    #>  [14] \" * to be searched for as a character string.\"                        #>  [15] \" * If this file is compiled from SimInf (when calling run), the\"     #>  [16] \" * macros are defined by SimInf before calling 'R CMD SHLIB'.\"       #>  [17] \" * If this file is compiled as part of a package, then the\"          #>  [18] \" * definitions are set in the variable 'PKG_CPPFLAGS' in\"            #>  [19] \" * 'src/Makevars' and 'src/Makevars.in'.\"                            #>  [20] \" */\"                                                                 #>  [21] \"#if !defined(SIMINF_MODEL_RUN)\"                                      #>  [22] \"#  error Definition for 'SIMINF_MODEL_RUN' is missing.\"              #>  [23] \"#endif\"                                                              #>  [24] \"#if !defined(SIMINF_R_INIT)\"                                         #>  [25] \"#  error Definition for 'SIMINF_R_INIT' is missing.\"                 #>  [26] \"#endif\"                                                              #>  [27] \"#if !defined(SIMINF_FORCE_SYMBOLS)\"                                  #>  [28] \"#  error Definition for 'SIMINF_FORCE_SYMBOLS' is missing.\"          #>  [29] \"#endif\"                                                              #>  [30] \"\"                                                                    #>  [31] \"/**\"                                                                 #>  [32] \" * @param u The compartment state vector in the node.\"               #>  [33] \" * @param v The continuous state vector in the node.\"                #>  [34] \" * @param ldata The local data vector in the node.\"                  #>  [35] \" * @param gdata The global data vector.\"                             #>  [36] \" * @param t Current time.\"                                           #>  [37] \" * @return propensity.\"                                              #>  [38] \" */\"                                                                 #>  [39] \"static double trFun1(\"                                               #>  [40] \"    const int *u,\"                                                   #>  [41] \"    const double *v,\"                                                #>  [42] \"    const double *ldata,\"                                            #>  [43] \"    const double *gdata,\"                                            #>  [44] \"    double t)\"                                                       #>  [45] \"{\"                                                                   #>  [46] \"    return gdata[0]*u[0]*u[1]/(u[0]+u[1]+u[2]);\"                     #>  [47] \"}\"                                                                   #>  [48] \"\"                                                                    #>  [49] \"/**\"                                                                 #>  [50] \" * @param u The compartment state vector in the node.\"               #>  [51] \" * @param v The continuous state vector in the node.\"                #>  [52] \" * @param ldata The local data vector in the node.\"                  #>  [53] \" * @param gdata The global data vector.\"                             #>  [54] \" * @param t Current time.\"                                           #>  [55] \" * @return propensity.\"                                              #>  [56] \" */\"                                                                 #>  [57] \"static double trFun2(\"                                               #>  [58] \"    const int *u,\"                                                   #>  [59] \"    const double *v,\"                                                #>  [60] \"    const double *ldata,\"                                            #>  [61] \"    const double *gdata,\"                                            #>  [62] \"    double t)\"                                                       #>  [63] \"{\"                                                                   #>  [64] \"    return gdata[1]*u[1];\"                                           #>  [65] \"}\"                                                                   #>  [66] \"\"                                                                    #>  [67] \"/**\"                                                                 #>  [68] \" * Post time step function.\"                                         #>  [69] \" *\"                                                                  #>  [70] \" * @param v_new If a continuous state vector is used by a model,\"    #>  [71] \" *        this is the new continuous state vector in the node after\" #>  [72] \" *        the post time step.\"                                       #>  [73] \" * @param u The compartment state vector in the node.\"               #>  [74] \" * @param v The current continuous state vector in the node.\"        #>  [75] \" * @param ldata The local data vector in the node.\"                  #>  [76] \" * @param gdata The global data vector that is common to all nodes.\" #>  [77] \" * @param node The node index. Note the node index is zero-based,\"   #>  [78] \" *        i.e., the first node is 0.\"                                #>  [79] \" * @param t Current time in the simulation.\"                         #>  [80] \" * @return error code (<0), or 1 if node needs to update the\"        #>  [81] \" *         transition rates, or 0 when it doesn't need to update\"    #>  [82] \" *         the transition rates.\"                                    #>  [83] \" */\"                                                                 #>  [84] \"static int ptsFun(\"                                                  #>  [85] \"    double *v_new,\"                                                  #>  [86] \"    const int *u,\"                                                   #>  [87] \"    const double *v,\"                                                #>  [88] \"    const double *ldata,\"                                            #>  [89] \"    const double *gdata,\"                                            #>  [90] \"    int node,\"                                                       #>  [91] \"    double t)\"                                                       #>  [92] \"{\"                                                                   #>  [93] \"    return 0;\"                                                       #>  [94] \"}\"                                                                   #>  [95] \"\"                                                                    #>  [96] \"/**\"                                                                 #>  [97] \" * Run a trajectory of the model.\"                                   #>  [98] \" *\"                                                                  #>  [99] \" * @param model The model.\"                                          #> [100] \" * @param solver The name of the numerical solver.\"                  #> [101] \" * @return A model with a trajectory attached to it.\"                #> [102] \" */\"                                                                 #> [103] \"static SEXP SIMINF_MODEL_RUN(SEXP model, SEXP solver)\"               #> [104] \"{\"                                                                   #> [105] \"    static SEXP(*SimInf_run)(SEXP, SEXP, TRFun*, PTSFun) = NULL;\"    #> [106] \"    TRFun tr_fun[] = {&trFun1, &trFun2};\"                            #> [107] \"\"                                                                    #> [108] \"    if (!SimInf_run) {\"                                              #> [109] \"        SimInf_run = (SEXP(*)(SEXP, SEXP, TRFun*, PTSFun))\"          #> [110] \"            R_GetCCallable(\\\"SimInf\\\", \\\"SimInf_run\\\");\"             #> [111] \"\"                                                                    #> [112] \"        if (!SimInf_run) {\"                                          #> [113] \"            Rf_error(\\\"Cannot find function 'SimInf_run'.\\\");\"       #> [114] \"        }\"                                                           #> [115] \"    }\"                                                               #> [116] \"\"                                                                    #> [117] \"    return SimInf_run(model, solver, tr_fun, &ptsFun);\"              #> [118] \"}\"                                                                   #> [119] \"\"                                                                    #> [120] \"/**\"                                                                 #> [121] \" * A NULL-terminated array of routines to register for the .Call\"    #> [122] \" * interface, see section '5.4 Registering native routines' in\"      #> [123] \" * the 'Writing R Extensions' manual.\"                               #> [124] \" */\"                                                                 #> [125] \"static const R_CallMethodDef callMethods[] =\"                        #> [126] \"{\"                                                                   #> [127] \"    SIMINF_CALLDEF(SIMINF_MODEL_RUN, 2),\"                            #> [128] \"    {NULL, NULL, 0}\"                                                 #> [129] \"};\"                                                                  #> [130] \"\"                                                                    #> [131] \"/**\"                                                                 #> [132] \" * This routine will be invoked when R loads the shared object/DLL,\" #> [133] \" * see section '5.4 Registering native routines' in the\"             #> [134] \" * 'Writing R Extensions' manual.\"                                   #> [135] \" */\"                                                                 #> [136] \"void SIMINF_R_INIT(DllInfo *info)\"                                   #> [137] \"{\"                                                                   #> [138] \"    R_registerRoutines(info, NULL, callMethods, NULL, NULL);\"        #> [139] \"    R_useDynamicSymbols(info, FALSE);\"                               #> [140] \"    R_forceSymbols(info, SIMINF_FORCE_SYMBOLS);\"                     #> [141] \"}\""},{"path":"http://stewid.github.io/SimInf/reference/SEIR-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the ‘SEIR’ model — SEIR-class","title":"Definition of the ‘SEIR’ model — SEIR-class","text":"Class handle SEIR SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an SEIR model — SEIR","title":"Create an SEIR model — SEIR","text":"Create SEIR model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an SEIR model — SEIR","text":"","code":"SEIR(u0, tspan, events = NULL, beta = NULL, epsilon = NULL, gamma = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an SEIR model — SEIR","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. beta numeric vector transmission rate susceptible infected node can different beta value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes. epsilon numeric vector incubation rate exposed infected node can different epsilon value. vector must length 1 nrow(u0).  vector length 1, model contains nodes, epsilon value repeated nodes. gamma numeric vector recovery rate infected recovered node can different gamma value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an SEIR model — SEIR","text":"SimInf_model class SEIR","code":""},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an SEIR model — SEIR","text":"SEIR model contains four compartments; number susceptible (S), number exposed (E) (infected yet infectious), number infectious (), number recovered (R).  Moreover, three state transitions, $$S \\stackrel{\\beta S / N}{\\longrightarrow} E$$ $$E \\stackrel{\\epsilon E}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} R$$ \\(\\beta\\) transmission rate, \\(\\epsilon\\) incubation rate, \\(\\gamma\\) recovery rate, \\(N=S+E++R\\). argument u0 must data.frame one row node following columns: S number sucsceptible node E number exposed node number infected node R number recovered node","code":""},{"path":"http://stewid.github.io/SimInf/reference/SEIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an SEIR model — SEIR","text":"","code":"## Create a SEIR model object. model <- SEIR(u0 = data.frame(S = 99, E = 0, I = 1, R = 0),               tspan = 1:100,               beta = 0.16,               epsilon = 0.25,               gamma = 0.077)  ## Run the SEIR model and plot the result. set.seed(3) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/SIR-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the SIR model — SIR-class","title":"Definition of the SIR model — SIR-class","text":"Class handle SIR SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Definition of the SIR model — SIR-class","text":"SIR model contains three compartments; number susceptible (S), number infectious (), number recovered (R).  Moreover, two state transitions, $$S \\stackrel{\\beta S / N}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} R$$ \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(N=S++R\\).","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Definition of the SIR model — SIR-class","text":"","code":"## Create an SIR model object. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIR model and plot the result. set.seed(22) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an SIR model — SIR","title":"Create an SIR model — SIR","text":"Create SIR model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an SIR model — SIR","text":"","code":"SIR(u0, tspan, events = NULL, beta = NULL, gamma = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an SIR model — SIR","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. beta numeric vector transmission rate susceptible infected node can different beta value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes. gamma numeric vector recovery rate infected recovered node can different gamma value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an SIR model — SIR","text":"SimInf_model class SIR","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an SIR model — SIR","text":"SIR model contains three compartments; number susceptible (S), number infectious (), number recovered (R).  Moreover, two state transitions, $$S \\stackrel{\\beta S / N}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} R$$ \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(N=S++R\\). argument u0 must data.frame one row node following columns: S number sucsceptible node number infected node R number recovered node","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an SIR model — SIR","text":"","code":"## Create an SIR model object. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIR model and plot the result. set.seed(22) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/SIS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the SIS model — SIS-class","title":"Definition of the SIS model — SIS-class","text":"Class handle SIS SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Definition of the SIS model — SIS-class","text":"SIS model contains two compartments; number susceptible (S), number infectious ().  Moreover, two state transitions, $$S \\stackrel{\\beta S / N}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} S$$ \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(N=S+\\).","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Definition of the SIS model — SIS-class","text":"","code":"## Create an SIS model object. model <- SIS(u0 = data.frame(S = 99, I = 1),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIS model and plot the result. set.seed(22) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an SIS model — SIS","title":"Create an SIS model — SIS","text":"Create SIS model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an SIS model — SIS","text":"","code":"SIS(u0, tspan, events = NULL, beta = NULL, gamma = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an SIS model — SIS","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. beta numeric vector transmission rate susceptible infected node can different beta value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes. gamma numeric vector recovery rate infected recovered node can different gamma value. vector must length 1 nrow(u0). vector length 1, model contains nodes, beta value repeated nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an SIS model — SIS","text":"SimInf_model class SIS","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an SIS model — SIS","text":"SIS model contains two compartments; number susceptible (S), number infectious ().  Moreover, two state transitions, $$S \\stackrel{\\beta S / N}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} S$$ \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(N=S+\\). argument u0 must data.frame one row node following columns: S number sucsceptible node number infected node","code":""},{"path":"http://stewid.github.io/SimInf/reference/SIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an SIS model — SIS","text":"","code":"## Create an SIS model object. model <- SIS(u0 = data.frame(S = 99, I = 1),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIS model and plot the result. set.seed(22) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/SISe-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the SISe model — SISe-class","title":"Definition of the SISe model — SISe-class","text":"Class handle SISe SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SISe model — SISe","title":"Create a SISe model — SISe","text":"Create ‘SISe’ model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SISe model — SISe","text":"","code":"SISe(   u0,   tspan,   events = NULL,   phi = NULL,   upsilon = NULL,   gamma = NULL,   alpha = NULL,   beta_t1 = NULL,   beta_t2 = NULL,   beta_t3 = NULL,   beta_t4 = NULL,   end_t1 = NULL,   end_t2 = NULL,   end_t3 = NULL,   end_t4 = NULL,   epsilon = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SISe model — SISe","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. phi numeric vector initial environmental infectious pressure node. repeated length nrow(u0). Default NULL gives 0 node. upsilon Indirect transmission rate environmental infectious pressure gamma recovery rate infected susceptible alpha Shed rate infected individuals beta_t1 decay environmental infectious pressure interval 1. beta_t2 decay environmental infectious pressure interval 2. beta_t3 decay environmental infectious pressure interval 3. beta_t4 decay environmental infectious pressure interval 4. end_t1 vector non-inclusive day year ends interval 1 node. repeated length nrow(u0). end_t2 vector non-inclusive day year ends interval 2 node. repeated length nrow(u0). end_t3 vector non-inclusive day year ends interval 3 node. repeated length nrow(u0). end_t4 vector non-inclusive day year ends interval 4 node. repeated length nrow(u0). epsilon background environmental infectious pressure","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SISe model — SISe","text":"SISe","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SISe model — SISe","text":"‘SISe’ model contains two compartments; number susceptible (S) number infectious (). Additionally, contains environmental compartment model shedding pathogen environment. Consequently, model two state transitions, $$S \\stackrel{\\upsilon \\varphi S}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} S$$ transition rate per unit time susceptible infected proportional concentration environmental contamination \\(\\varphi\\) node. Moreover, transition rate infected susceptible recovery rate \\(\\gamma\\), measured per individual per unit time. Finally, environmental infectious pressure node evolved , $$\\frac{d\\varphi(t)}{dt} = \\frac{\\alpha (t)}{N(t)} - \\beta(t) \\varphi(t) + \\epsilon$$ \\(\\alpha\\) average shedding rate pathogen environment per infected individual \\(N = S + \\) size node. seasonal decay removal pathogen captured \\(\\beta(t)\\). also possible include small background infectious pressure \\(\\epsilon\\) allow indirect sources environmental contamination. environmental infectious pressure \\(\\varphi(t)\\) node evolved time unit Euler forward method. value \\(\\varphi(t)\\) saved time-points specified tspan. argument u0 must data.frame one row node following columns: S number sucsceptible node number infected node","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe.html","id":"beta","dir":"Reference","previous_headings":"","what":"Beta","title":"Create a SISe model — SISe","text":"time dependent beta divided four intervals year","code":"where 0 <= day < 365  Case 1: END_1 < END_2 < END_3 < END_4 INTERVAL_1 INTERVAL_2     INTERVAL_3     INTERVAL_4     INTERVAL_1 [0, END_1) [END_1, END_2) [END_2, END_3) [END_3, END_4) [END_4, 365)  Case 2: END_3 < END_4 < END_1 < END_2 INTERVAL_3 INTERVAL_4     INTERVAL_1     INTERVAL_2     INTERVAL_3 [0, END_3) [END_3, END_4) [END_4, END_1) [END_1, END_2) [END_2, 365)  Case 3: END_4 < END_1 < END_2 < END_3 INTERVAL_4 INTERVAL_1     INTERVAL_2     INTERVAL_3     INTERVAL_4 [0, END_4) [END_4, END_1) [END_1, END_2) [END_2, END_3) [END_3, 365)"},{"path":"http://stewid.github.io/SimInf/reference/SISe3-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the ‘SISe3’ model — SISe3-class","title":"Definition of the ‘SISe3’ model — SISe3-class","text":"Class handle SISe3 SimInf_model model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SISe3 model — SISe3","title":"Create a SISe3 model — SISe3","text":"Create SISe3 model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SISe3 model — SISe3","text":"","code":"SISe3(   u0,   tspan,   events = NULL,   phi = NULL,   upsilon_1 = NULL,   upsilon_2 = NULL,   upsilon_3 = NULL,   gamma_1 = NULL,   gamma_2 = NULL,   gamma_3 = NULL,   alpha = NULL,   beta_t1 = NULL,   beta_t2 = NULL,   beta_t3 = NULL,   beta_t4 = NULL,   end_t1 = NULL,   end_t2 = NULL,   end_t3 = NULL,   end_t4 = NULL,   epsilon = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SISe3 model — SISe3","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. phi numeric vector initial environmental infectious pressure node. repeated length nrow(u0). Default NULL gives 0 node. upsilon_1 Indirect transmission rate environmental infectious pressure age category 1 upsilon_2 Indirect transmission rate environmental infectious pressure age category 2 upsilon_3 Indirect transmission rate environmental infectious pressure age category 3 gamma_1 recovery rate infected susceptible age category 1 gamma_2 recovery rate infected susceptible age category 2 gamma_3 recovery rate infected susceptible age category 3 alpha Shed rate infected individuals beta_t1 decay environmental infectious pressure interval 1. beta_t2 decay environmental infectious pressure interval 2. beta_t3 decay environmental infectious pressure interval 3. beta_t4 decay environmental infectious pressure interval 4. end_t1 vector non-inclusive day year ends interval 1 node. repeated length nrow(u0). end_t2 vector non-inclusive day year ends interval 2 node. repeated length nrow(u0). end_t3 vector non-inclusive day year ends interval 3 node. repeated length nrow(u0). end_t4 vector non-inclusive day year ends interval 4 node. repeated length nrow(u0). epsilon background environmental infectious pressure","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SISe3 model — SISe3","text":"SISe3","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SISe3 model — SISe3","text":"SISe3 model contains two compartments three age categories; number susceptible (S_1, S_2, S_3) number infectious (I_1, I_2, I_3). Additionally, contains environmental compartment model shedding pathogen environment. Consequently, model six state transitions, $$S_1 \\stackrel{\\upsilon_1 \\varphi S_1}{\\longrightarrow} I_1$$ $$I_1 \\stackrel{\\gamma_1 I_1}{\\longrightarrow} S_1$$ $$S_2 \\stackrel{\\upsilon_2 \\varphi S_2}{\\longrightarrow} I_2$$ $$I_2 \\stackrel{\\gamma_2 I_2}{\\longrightarrow} S_2$$ $$S_3 \\stackrel{\\upsilon_3 \\varphi S_3}{\\longrightarrow} I_3$$ $$I_3 \\stackrel{\\gamma_3 I_3}{\\longrightarrow} S_3$$ transition rate per unit time susceptible infected proportional concentration environmental contamination \\(\\varphi\\) node. Moreover, transition rate infected susceptible recovery rate \\(\\gamma_1, \\gamma_2, \\gamma_3\\), measured per individual per unit time. Finally, environmental infectious pressure node evolved , $$\\frac{d\\varphi(t)}{dt} = \\frac{\\alpha \\left(I_1(t) + I_2(t) + I_3(t)\\right)}{N(t)} - \\beta(t) \\varphi(t) + \\epsilon$$ \\(\\alpha\\) average shedding rate pathogen environment per infected individual \\(N = S_1 + S_2 + S_3 + I_1 + I_2 + I_3\\) size node. seasonal decay removal pathogen captured \\(\\beta(t)\\). also possible include small background infectious pressure \\(\\epsilon\\) allow indirect sources environmental contamination. environmental infectious pressure \\(\\varphi(t)\\) node evolved time unit Euler forward method. value \\(\\varphi(t)\\) saved time-points specified tspan. argument u0 must data.frame one row node following columns: S_1 number sucsceptible age category 1 I_1 number infected age category 1 S_2 number sucsceptible age category 2 I_2 number infected age category 2 S_3 number sucsceptible age category 3 I_3 number infected age category 3","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3.html","id":"beta","dir":"Reference","previous_headings":"","what":"Beta","title":"Create a SISe3 model — SISe3","text":"time dependent beta divided four intervals year","code":"where 0 <= day < 365  Case 1: END_1 < END_2 < END_3 < END_4 INTERVAL_1 INTERVAL_2     INTERVAL_3     INTERVAL_4     INTERVAL_1 [0, END_1) [END_1, END_2) [END_2, END_3) [END_3, END_4) [END_4, 365)  Case 2: END_3 < END_4 < END_1 < END_2 INTERVAL_3 INTERVAL_4     INTERVAL_1     INTERVAL_2     INTERVAL_3 [0, END_3) [END_3, END_4) [END_4, END_1) [END_1, END_2) [END_2, 365)  Case 3: END_4 < END_1 < END_2 < END_3 INTERVAL_4 INTERVAL_1     INTERVAL_2     INTERVAL_3     INTERVAL_4 [0, END_4) [END_4, END_1) [END_1, END_2) [END_2, END_3) [END_3, 365)"},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the ‘SISe3_sp’ model — SISe3_sp-class","title":"Definition of the ‘SISe3_sp’ model — SISe3_sp-class","text":"Class handle SISe3_sp SimInf_model model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an SISe3_sp model — SISe3_sp","title":"Create an SISe3_sp model — SISe3_sp","text":"Create SISe3_sp model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an SISe3_sp model — SISe3_sp","text":"","code":"SISe3_sp(   u0,   tspan,   events = NULL,   phi = NULL,   upsilon_1 = NULL,   upsilon_2 = NULL,   upsilon_3 = NULL,   gamma_1 = NULL,   gamma_2 = NULL,   gamma_3 = NULL,   alpha = NULL,   beta_t1 = NULL,   beta_t2 = NULL,   beta_t3 = NULL,   beta_t4 = NULL,   end_t1 = NULL,   end_t2 = NULL,   end_t3 = NULL,   end_t4 = NULL,   distance = NULL,   coupling = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an SISe3_sp model — SISe3_sp","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. phi numeric vector initial environmental infectious pressure node. repeated length nrow(u0). Default NULL gives 0 node. upsilon_1 Indirect transmission rate environmental infectious pressure age category 1 upsilon_2 Indirect transmission rate environmental infectious pressure age category 2 upsilon_3 Indirect transmission rate environmental infectious pressure age category 3 gamma_1 recovery rate infected susceptible age category 1 gamma_2 recovery rate infected susceptible age category 2 gamma_3 recovery rate infected susceptible age category 3 alpha Shed rate infected individuals beta_t1 decay environmental infectious pressure interval 1. beta_t2 decay environmental infectious pressure interval 2. beta_t3 decay environmental infectious pressure interval 3. beta_t4 decay environmental infectious pressure interval 4. end_t1 vector non-inclusive day year ends interval 1 node. repeated length nrow(u0). end_t2 vector non-inclusive day year ends interval 2 node. repeated length nrow(u0). end_t3 vector non-inclusive day year ends interval 3 node. repeated length nrow(u0). end_t4 vector non-inclusive day year ends interval 4 node. repeated length nrow(u0). distance distance matrix neighboring nodes coupling coupling neighboring nodes","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an SISe3_sp model — SISe3_sp","text":"SISe3_sp","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an SISe3_sp model — SISe3_sp","text":"SISe3_sp model contains two compartments three age categories; number susceptible (S_1, S_2, S_3) number infectious (I_1, I_2, I_3). Additionally, contains environmental compartment model shedding pathogen environment. Moreover, also includes spatial coupling environmental contamination among proximal nodes capture -node spread unrelated moving infected individuals. Consequently, model six state transitions, $$S_1 \\stackrel{\\upsilon_1 \\varphi S_1}{\\longrightarrow} I_1$$ $$I_1 \\stackrel{\\gamma_1 I_1}{\\longrightarrow} S_1$$ $$S_2 \\stackrel{\\upsilon_2 \\varphi S_2}{\\longrightarrow} I_2$$ $$I_2 \\stackrel{\\gamma_2 I_2}{\\longrightarrow} S_2$$ $$S_3 \\stackrel{\\upsilon_3 \\varphi S_3}{\\longrightarrow} I_3$$ $$I_3 \\stackrel{\\gamma_3 I_3}{\\longrightarrow} S_3$$ transition rate per unit time susceptible infected proportional concentration environmental contamination \\(\\varphi\\) node. Moreover, transition rate infected susceptible recovery rate \\(\\gamma_1, \\gamma_2, \\gamma_3\\), measured per individual per unit time. Finally, environmental infectious pressure node evolved , $$\\frac{d \\varphi_i(t)}{dt} = \\frac{\\alpha \\left(I_{,1}(t) + I_{,2}(t) + I_{,3}(t)\\right)}{N_i(t)} + \\sum_k{\\frac{\\varphi_k(t) N_k(t) - \\varphi_i(t) N_i(t)}{N_i(t)} \\cdot \\frac{D}{d_{ik}}} - \\beta(t) \\varphi_i(t)$$ \\(\\alpha\\) average shedding rate pathogen environment per infected individual \\(N = S_1 + S_2 + S_3 + I_1 + I_2 + I_3\\) size node. Next comes spatial coupling among proximal nodes, \\(D\\) rate local spread \\(d_{ik}\\) distance holdings \\(\\) \\(k\\). seasonal decay removal pathogen captured \\(\\beta(t)\\). environmental infectious pressure \\(\\varphi(t)\\) node evolved time unit Euler forward method. value \\(\\varphi(t)\\) saved time-points specified tspan. argument u0 must data.frame one row node following columns: S_1 number sucsceptible age category 1 I_1 number infected age category 1 S_2 number sucsceptible age category 2 I_2 number infected age category 2 S_3 number sucsceptible age category 3 I_3 number infected age category 3","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe3_sp.html","id":"beta","dir":"Reference","previous_headings":"","what":"Beta","title":"Create an SISe3_sp model — SISe3_sp","text":"time dependent beta divided four intervals year","code":"where 0 <= day < 365  Case 1: END_1 < END_2 < END_3 < END_4 INTERVAL_1 INTERVAL_2     INTERVAL_3     INTERVAL_4     INTERVAL_1 [0, END_1) [END_1, END_2) [END_2, END_3) [END_3, END_4) [END_4, 365)  Case 2: END_3 < END_4 < END_1 < END_2 INTERVAL_3 INTERVAL_4     INTERVAL_1     INTERVAL_2     INTERVAL_3 [0, END_3) [END_3, END_4) [END_4, END_1) [END_1, END_2) [END_2, 365)  Case 3: END_4 < END_1 < END_2 < END_3 INTERVAL_4 INTERVAL_1     INTERVAL_2     INTERVAL_3     INTERVAL_4 [0, END_4) [END_4, END_1) [END_1, END_2) [END_2, END_3) [END_3, 365)"},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of the SISe_sp model — SISe_sp-class","title":"Definition of the SISe_sp model — SISe_sp-class","text":"Class handle SISe_sp SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SISe_sp model — SISe_sp","title":"Create a SISe_sp model — SISe_sp","text":"Create SISe_sp model used simulation framework.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SISe_sp model — SISe_sp","text":"","code":"SISe_sp(   u0,   tspan,   events = NULL,   phi = NULL,   upsilon = NULL,   gamma = NULL,   alpha = NULL,   beta_t1 = NULL,   beta_t2 = NULL,   beta_t3 = NULL,   beta_t4 = NULL,   end_t1 = NULL,   end_t2 = NULL,   end_t3 = NULL,   end_t4 = NULL,   coupling = NULL,   distance = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SISe_sp model — SISe_sp","text":"u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events, see SimInf_model. phi numeric vector initial environmental infectious pressure node. repeated length nrow(u0). Default NULL gives 0 node. upsilon Indirect transmission rate environmental infectious pressure gamma recovery rate infected susceptible alpha Shed rate infected individuals beta_t1 decay environmental infectious pressure interval 1. beta_t2 decay environmental infectious pressure interval 2. beta_t3 decay environmental infectious pressure interval 3. beta_t4 decay environmental infectious pressure interval 4. end_t1 vector non-inclusive day year ends interval 1 node. repeated length nrow(u0). end_t2 vector non-inclusive day year ends interval 2 node. repeated length nrow(u0). end_t3 vector non-inclusive day year ends interval 3 node. repeated length nrow(u0). end_t4 vector non-inclusive day year ends interval 4 node. repeated length nrow(u0). coupling coupling neighboring nodes distance distance matrix neighboring nodes","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SISe_sp model — SISe_sp","text":"SISe_sp","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SISe_sp model — SISe_sp","text":"SISe_sp model contains two compartments; number susceptible (S) number infectious (). Additionally, contains environmental compartment model shedding pathogen environment. Moreover, also includes spatial coupling environmental contamination among proximal nodes capture -node spread unrelated moving infected individuals. Consequently, model two state transitions, $$S \\stackrel{\\upsilon \\varphi S}{\\longrightarrow} $$ $$\\stackrel{\\gamma }{\\longrightarrow} S$$ transition rate per unit time susceptible infected proportional concentration environmental contamination \\(\\varphi\\) node. Moreover, transition rate infected susceptible recovery rate \\(\\gamma\\), measured per individual per unit time. Finally, environmental infectious pressure node evolved , $$\\frac{d \\varphi_i(t)}{dt} = \\frac{\\alpha I_{}(t)}{N_i(t)} + \\sum_k{\\frac{\\varphi_k(t) N_k(t) - \\varphi_i(t) N_i(t)}{N_i(t)} \\cdot \\frac{D}{d_{ik}}} - \\beta(t) \\varphi_i(t)$$ \\(\\alpha\\) average shedding rate pathogen environment per infected individual \\(N = S + \\) size node. Next comes spatial coupling among proximal nodes, \\(D\\) rate local spread \\(d_{ik}\\) distance holdings \\(\\) \\(k\\). seasonal decay removal pathogen captured \\(\\beta(t)\\). environmental infectious pressure \\(\\varphi(t)\\) node evolved time unit Euler forward method. value \\(\\varphi(t)\\) saved time-points specified tspan. argument u0 must data.frame one row node following columns: S number sucsceptible number infected","code":""},{"path":"http://stewid.github.io/SimInf/reference/SISe_sp.html","id":"beta","dir":"Reference","previous_headings":"","what":"Beta","title":"Create a SISe_sp model — SISe_sp","text":"time dependent beta divided four intervals year","code":"where 0 <= day < 365  Case 1: END_1 < END_2 < END_3 < END_4 INTERVAL_1 INTERVAL_2     INTERVAL_3     INTERVAL_4     INTERVAL_1 [0, END_1) [END_1, END_2) [END_2, END_3) [END_3, END_4) [END_4, 365)  Case 2: END_3 < END_4 < END_1 < END_2 INTERVAL_3 INTERVAL_4     INTERVAL_1     INTERVAL_2     INTERVAL_3 [0, END_3) [END_3, END_4) [END_4, END_1) [END_1, END_2) [END_2, 365)  Case 3: END_4 < END_1 < END_2 < END_3 INTERVAL_4 INTERVAL_1     INTERVAL_2     INTERVAL_3     INTERVAL_4 [0, END_4) [END_4, END_1) [END_1, END_2) [END_2, END_3) [END_3, 365)"},{"path":"http://stewid.github.io/SimInf/reference/SimInf.html","id":null,"dir":"Reference","previous_headings":"","what":"A Framework for Data-Driven Stochastic Disease Spread Simulations — SimInf","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations — SimInf","text":"SimInf package provides flexible framework data-driven spatio-temporal disease spread modeling, designed efficiently handle population demographics network data. framework integrates infection dynamics subpopulation continuous-time Markov chains (CTMC) using Gillespie stochastic simulation algorithm (SSA) incorporates available data births, deaths movements scheduled events. scheduled event used modify state subpopulation predefined time-point.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations — SimInf","text":"SimInf_model central provides basis framework. SimInf_model object supplies state-change matrix, dependency graph, scheduled events, initial state system. predefined models SimInf generating function, name model, example SIR. model can also created model specification using mparse method. model created, simulation started call run method execution successful, returns modified SimInf_model object single stochastic solution trajectory attached . SimInf provides several utility functions inspect simulated data, example, show, summary plot. facilitate custom analysis, provides trajectory,SimInf_model-method prevalence methods. One design goal make SimInf extendable enable usage numerical solvers R extension packages order facilitate complex epidemiological research.  support , SimInf functionality generate required C R code model specification, see package_skeleton","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations — SimInf","text":"2019","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/SimInf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A Framework for Data-Driven Stochastic Disease Spread Simulations — SimInf","text":"Maintainer: Stefan Widgren stefan.widgren@gmail.com (ORCID) Authors: Robin Eriksson (ORCID) Stefan Engblom (ORCID) Pavol Bauer (ORCID) contributors: Thomas Rosendal (ORCID) [contributor] Ivana Rodriguez Ewerlöf (ORCID) [contributor] Attractive Chaos (Author 'kvec.h'.) [copyright holder]","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_abc-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"SimInf_abc\"","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_abc-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"model SimInf_model object estimate parameters . priors data.frame containing four columns parameter, distribution, p1 p2. column parameter gives name parameter referred model. column distribution contains name prior distribution. Valid distributions 'gamma', 'normal' 'uniform'. column p1 numeric vector first hyperparameter prior: 'gamma') shape, 'lognormal') logmean, 'normal') mean, 'uniform') lower bound. column p2 numeric vector second hyperparameter prior: 'gamma') rate, 'lognormal') standard deviation log scale, 'normal') standard deviation, 'uniform') upper bound. target Character vector (gdata ldata) determines ABC-SMC method estimates parameters model@gdata model@ldata. pars Index parameters target. nprop integer vector number simulated proposals generation. fn function calculating summary statistics simulated trajectory determine distance particle, see abc details. tolerance numeric matrix (number summary statistics \\(\\times\\) number generations) column contains tolerances generation row contains sequence gradually decreasing tolerances. x numeric array (number particles \\(\\times\\) number parameters \\(\\times\\) number generations) parameter values accepted particles generation. row one particle. weight numeric matrix (number particles \\(\\times\\) number generations) weights particles x corresponding generation. distance numeric array (number particles \\(\\times\\) number summary statistics \\(\\times\\) number generations) distance particles x generation. row contains distance particle column contains distance summary statistic. ess numeric vector effective sample size (ESS) generation. effective sample size computed $$\\left(\\sum_{=1}^N\\!(w_{g}^{()})^2\\right)^{-1},$$ \\(w_{g}^{()}\\) normalized weight particle \\(\\) generation \\(g\\). init_model optional function , non-NULL, applied running proposal. function must accept one argument type SimInf_model current model fitting process. function can useful specify initial state u0 v0 model running trajectory proposed parameters.","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class hold data scheduled events modify discrete state individuals node pre-defined time t.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"E row corresponds one compartment model. non-zero entries column indicates compartments include event.  exit, internal transfer external transfer events, non-zero entry indicate compartments sample individuals . enter event, individuals enter first non-zero compartment. E sparse matrix class dgCMatrix. N Determines individuals internal transfer external transfer events shifted enter another compartment.  row corresponds one compartment model.  values column added current compartment sampled individuals specify destination compartment, example, value 1 entry means sampled individuals compartment moved next compartment.  column use event specified shift vector (see ).  N integer matrix. event Type event: 0) exit, 1) enter, 2) internal transfer, 3) external transfer. values reserved future event types supported current solvers. Integer vector. time Time event occurs .e., event processed time reached simulation.  time integer vector. node node event operates . Also source node external transfer event.  Integer vector. 1 <= node[] <= Number nodes. dest destination node external transfer event .e., individuals moved node dest, 1 <= dest[] <= Number nodes. Set event = 0 event types.  dest integer vector. n number individuals affected event. Integer vector.  n[] >= 0. proportion n[] equals zero, number individuals affected event[] calculated sampling number individuals binomial distribution using proportion[] number individuals compartments. Numeric vector.  0 <= proportion[] <= 1. select process event[], compartments affected event specified select[] together matrix E, select[] determines column E use.  specific individuals affected event proportionally sampled compartments corresponding non-zero entries specified column E[, select[]], select integer vector. shift Determines individuals internal transfer external transfer events shifted enter another compartment.  sampled individuals shifted according column shift[] matrix N .e., N[, shift[]], shift integer vector. See description N. Unsued event types.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SimInf_events object — SimInf_events","title":"Create a SimInf_events object — SimInf_events","text":"argument events must data.frame following columns: event Four event types supported current solvers:     exit, enter, internal transfer,     external transfer.  assigning events, can     either coded numerical value character string:     exit; 0 'exit', enter; 1     'enter', internal transfer; 2     'intTrans', external transfer; 3     'extTrans'.  Internally SimInf, event type     coded numerical value. time event occurs .e., event processed time     reached simulation. Can either integer     Date vector.  Date vector coerced     numeric vector days, t0 determines offset     match time events model tspan     vector. node node event operates . Also source node     external transfer event.     1 <= node[] <= Number nodes. dest destination node external transfer event     .e., individuals moved node dest,     1 <= dest[] <= Number nodes.  Set event     = 0 event types.  dest integer     vector. n number individuals affected event. n[] >= 0. proportion n[] equals zero, number individuals affected     event[] calculated sampling number     individuals binomial distribution using     proportion[] number individuals     compartments. Numeric vector.  0 <= proportion[] <= 1. select process event[], compartments affected     event specified select[] together     matrix E, select[] determines     column E use.  specific individuals affected     event sampled compartments corresponding     non-zero entries specified column E[,     select[]], select integer vector. shift Determines individuals internal transfer     external transfer events shifted enter another     compartment.  sampled individuals shifted according     column shift[] matrix N .e., N[,     shift[]], shift integer vector.  See     description N. Unsued     event types.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SimInf_events object — SimInf_events","text":"","code":"SimInf_events(E = NULL, N = NULL, events = NULL, t0 = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SimInf_events object — SimInf_events","text":"E row corresponds one compartment model. non-zero entries column indicates compartments include event.  exit, internal transfer external transfer events, non-zero entry indicate compartments sample individuals . enter event, individuals enter first non-zero compartment. E sparse matrix class dgCMatrix. N Determines individuals internal transfer external transfer events shifted enter another compartment.  row corresponds one compartment model.  values column added current compartment sampled individuals specify destination compartment, example, value 1 entry means sampled individuals compartment moved next compartment.  column use event specified shift vector (see ).  N integer matrix. events data.frame events. t0 events$time Date vector, t0 determines offset match time events model tspan vector, see details. events$time numeric vector, t0 must NULL.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SimInf_events object — SimInf_events","text":"S4 class SimInf_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SimInf_events object — SimInf_events","text":"","code":"## Let us illustrate how movement events can be used to transfer ## individuals from one node to another.  Use the built-in SIR ## model and start with 2 nodes where all individuals are in the ## first node (100 per compartment). u0 <- data.frame(S = c(100, 0), I = c(100, 0), R = c(100, 0))  ## Then create 300 movement events to transfer all individuals, ## one per day, from the first node to the second node. Use the ## fourth column in the select matrix where all compartments ## can be sampled with equal weight. events <- data.frame(event      = rep(\"extTrans\", 300),                      time       = 1:300,                      node       = 1,                      dest       = 2,                      n          = 1,                      proportion = 0,                      select     = 4,                      shift      = 0)  ## Create an SIR model without disease transmission to ## demonstrate the events. model <- SIR(u0      = u0,              tspan  = 1:300,              events = events,              beta   = 0,              gamma  = 0)  ## Run the model and plot the number of individuals in ## the second node.  As can be seen in the figure, all ## indivuduals have been moved to the second node when ## t = 300. plot(run(model), index = 1:2, range = FALSE)   ## Let us now double the weight to sample from the 'I' ## compartment and rerun the model. model@events@E[2, 4] <- 2 plot(run(model), index = 1:2, range = FALSE)   ## And much larger weight to sample from the I compartment. model@events@E[2, 4] <- 10 plot(run(model), index = 1:2, range = FALSE)   ## Increase the weight for the R compartment. model@events@E[3, 4] <- 4 plot(run(model), index = 1:2, range = FALSE)"},{"path":"http://stewid.github.io/SimInf/reference/SimInf_indiv_events-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"SimInf_indiv_events\"","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_indiv_events-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"id integer character identifier individual. event four event types supported: exit, enter, internal transfer, external transfer.  assigning events, can either coded numerical value character string: exit; 0 'exit', enter; 1 'enter', internal transfer; 2 'intTrans', external transfer; 3 'extTrans'. time integer, character, date (class Date) event occured. character must able coerce Date. node integer character identifier source node. dest integer character identifier destination node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class handle data SimInf_model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"G Dependency graph indicates transition rates need updated given state transition occured. non-zero entry element G[, ] indicates transition rate needs recalculated state transition j occurs. Sparse matrix (\\(Nt \\times Nt\\)) object class dgCMatrix. S column corresponds state transition, execution state transition j amounts adding S[, j] column state vector u[, ] node transition occurred. Sparse matrix (\\(Nc \\times Nt\\)) object class dgCMatrix. U result matrix number individuals compartment every node. U[, j] contains number individuals compartment tspan[j]. U[1:Nc, j] contains number individuals node 1 tspan[j]. U[(Nc + 1):(2 * Nc), j] contains number individuals node 2 tspan[j] etc. Integer matrix (\\(N_n N_c \\times\\) length(tspan)). U_sparse model configured write solution sparse matrix (dgCMatrix) U_sparse contains data U empty. layout data U_sparse identical U. Please note U_sparse numeric U integer. V result matrix real-valued continuous state. V[, j] contains real-valued state system tspan[j]. Numeric matrix (\\(N_n\\)dim(ldata)[1] \\(\\times\\) length(tspan)). V_sparse model configured write solution sparse matrix (dgCMatrix) V_sparse contains data V empty. layout data V_sparse identical V. ldata matrix local data nodes. column ldata[, j] contains local data vector node j. local data vector passed argument transition rate functions post time step function. gdata numeric vector global data common nodes.  global data vector passed argument transition rate functions post time step function. tspan vector increasing time points state node returned. u0 initial state vector (\\(N_c \\times N_n\\)) number individuals compartment every node. v0 initial value real-valued continuous state. Numeric matrix (dim(ldata)[1] \\(\\times N_n\\)). events Scheduled events SimInf_events C_code Character vector optional model C code. non-empty, C code written temporary C-file run method called.  temporary C-file compiled resulting DLL dynamically loaded. DLL unloaded temporary files removed running model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SimInf_model — SimInf_model","title":"Create a SimInf_model — SimInf_model","text":"Create SimInf_model","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SimInf_model — SimInf_model","text":"","code":"SimInf_model(   G,   S,   tspan,   events = NULL,   ldata = NULL,   gdata = NULL,   U = NULL,   u0 = NULL,   v0 = NULL,   V = NULL,   E = NULL,   N = NULL,   C_code = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SimInf_model — SimInf_model","text":"G Dependency graph indicates transition rates need updated given state transition occured. non-zero entry element G[, ] indicates transition rate needs recalculated state transition j occurs. Sparse matrix (\\(Nt \\times Nt\\)) object class dgCMatrix. S column corresponds transition, execution state transition j amounts adding S[, j] state vector node state transition occurred.  Sparse matrix (\\(Nc \\times Nt\\)) object class dgCMatrix. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events. ldata local data nodes. Can either specified data.frame one row per node. matrix column ldata[, j] contains local data vector node j. local data vector passed argument transition rate functions post time step function. gdata numeric vector global data common nodes. global data vector passed argument transition rate functions post time step function. U result matrix number individuals disease state every node (\\(N_n N_c \\times\\) length(tspan)).  U[, j] contains number individuals disease state tspan[j]. U[1:Nc, j] contains state node 1 tspan[j]. U[(Nc + 1):(2 * Nc), j] contains state node 2 tspan[j] etc. u0 initial state vector. Either matrix (\\(N_c \\times N_n\\)) data.frame number individuals compartment every node. v0 initial continuous state vector every node. (dim(ldata)[1] \\(\\times N_N\\)). continuous state vector updated specific model simulation post time step function. V result matrix real-valued continous compartment state (\\(N_n\\)dim(ldata)[1] \\(\\times\\) length(tspan)).  V[, j] contains real-valued state system tspan[j]. E Sparse matrix handle scheduled events, see SimInf_events. N Sparse matrix handle scheduled events, see SimInf_events. C_code Character vector optional model C code. non-empty, C code written temporary C-file run method called.  temporary C-file compiled resulting DLL dynamically loaded. DLL unloaded temporary files removed running model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SimInf_model — SimInf_model","text":"SimInf_model","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_pfilter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"SimInf_pfilter\"","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_pfilter-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"model SimInf_model object one filtered trajectory attached. npart integer number particles used timestep. loglik estimated log likelihood. ess numeric vector effective sample size (ESS). effective sample size computed $$\\left(\\sum_{=1}^N\\!(w_{t}^{})^2\\right)^{-1},$$ \\(w_{t}^{}\\) normalized weight particle \\(\\) time \\(t\\).","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_pmcmc-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"SimInf_pmcmc\"","code":""},{"path":"http://stewid.github.io/SimInf/reference/SimInf_pmcmc-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"model SimInf_model object estimate parameters . priors data.frame containing four columns parameter, distribution, p1 p2. column parameter gives name parameter referred model. column distribution contains name prior distribution. Valid distributions 'gamma', 'normal' 'uniform'. column p1 numeric vector first hyperparameter prior: 'gamma') shape, 'lognormal') logmean, 'normal') mean, 'uniform') lower bound. column p2 numeric vector second hyperparameter prior: 'gamma') rate, 'lognormal') standard deviation log scale, 'normal') standard deviation, 'uniform') upper bound. target Character vector (gdata ldata) determines pmcmc method estimates parameters model@gdata model@ldata. pars Index parameters target. npart n integer number particles (> 1) use bootstrap particle filter. obs_process formula function determining observation process. init_model FIXME. post_particle optional function , non-NULL, applied completed particle. function must accept three arguments: 1) object SimInf_pmcmc current state fitting process, 2) object SimInf_pfilter last particle one filtered trajectory attached, 3) integer iteration fitting process. function can useful , example, monitor, save inspect intermediate results. data data.frame holding time series data observation process. chain matrix row contains logPost, logLik, logPrior, accept, parameters iteration. pf List filtered trajectory iteration. covmat named numeric (npars x npars) matrix covariances use initial proposal matrix. adaptmix Mixing proportion adaptive proposal. adaptive Controls start adaptive update.","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate Bayesian computation — abc","title":"Approximate Bayesian computation — abc","text":"Approximate Bayesian computation","code":""},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate Bayesian computation — abc","text":"","code":"abc(   model,   priors = NULL,   npart = NULL,   ninit = NULL,   distance = NULL,   tolerance = NULL,   ...,   verbose = getOption(\"verbose\", FALSE),   post_gen = NULL,   init_model = NULL )  # S4 method for class 'SimInf_model' abc(   model,   priors = NULL,   npart = NULL,   ninit = NULL,   distance = NULL,   tolerance = NULL,   ...,   verbose = getOption(\"verbose\", FALSE),   post_gen = NULL,   init_model = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate Bayesian computation — abc","text":"model SimInf_model object generate data . priors priors parameters fit. prior specified formula notation, example, beta ~ uniform(0, 1) specifies beta uniformly distributed 0 1. Use c() provide one prior, example, c(beta ~ uniform(0, 1), gamma ~ normal(10, 1)). following distributions supported: gamma, lognormal, normal uniform. parameters priors must either gdata ldata. npart integer (>1) specifying number particles approximate posterior . ninit Specify positive integer (>npart) adaptively select sequence tolerances using algorithm Simola others (2021). initial tolerance adaptively selected sampling ninit draws prior retain npart particles smallest distances. Note must enough initial particles satisfactorily explore parameter space, see Simola others (2021). tolerance parameter specified, ninit must NULL. distance function calculating summary statistics simulated trajectory. particle, function must determine distance return information. first argument, result, passed distance function result run model one trajectory attached . second argument, generation, distance integer generation particle(s). arguments can passed distance function comes ... abc function. Depending underlying model structure, data one particles generated call distance. model contains one node parameters fit ldata, node replicated replicated nodes represent one particle trajectory (see ‘Examples’). hand model contains multiple nodes parameters fit contained gdata, trajectory result argument represents one particle. function can return numeric matrix (number particles \\(\\times\\) number summary statistics). , distance contains one summary statistic, numeric vector length equal number particles. Note using adaptive tolerance selection, one summary statistic can used, .e., function must return matrix (number particles \\(\\times\\) 1) numeric vector. tolerance numeric matrix (number summary statistics \\(\\times\\) number generations) column contains tolerances generation row contains sequence gradually decreasing tolerances. Can also numeric vector one summary statistic. tolerance determines number generations ABC-SMC run. ninit parameter specified, tolerance must NULL. ... arguments passed fn. verbose prints diagnostic messages TRUE. default retrieve global option verbose use FALSE set. post_gen optional function , non-NULL, applied completed generation. function must accept one argument type SimInf_abc current state fitting process. function can useful , example, save inspect intermediate results. init_model optional function , non-NULL, applied running proposal. function must accept one argument type SimInf_model current model fitting process. function can useful specify initial state u0 v0 model running trajectory proposed parameters.","code":""},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate Bayesian computation — abc","text":"SimInf_abc object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate Bayesian computation — abc","text":"2009 2021","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/abc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate Bayesian computation — abc","text":"","code":"if (FALSE) { # \\dontrun{ ## Let us consider an SIR model in a closed population with N = 100 ## individuals of whom one is initially infectious and the rest are ## susceptible. First, generate one realisation (with a specified ## seed) from the model with known parameters \\code{beta = 0.16} and ## \\code{gamma = 0.077}. Then, use \\code{abc} to infer the (known) ## parameters from the simulated data. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIR model and plot the number of infectious. set.seed(22) infectious <- trajectory(run(model), \"I\")$I plot(infectious, type = \"s\")  ## The distance function to accept or reject a proposal. Each node ## in the simulated trajectory (contained in the 'result' object) ## represents one proposal. distance <- function(result, ...) {     ## Extract the time-series of infectious in each node as a     ## data.frame.     sim <- trajectory(result, \"I\")      ## Split the 'sim' data.frame by node and calculate the sum of the     ## squared distance at each time-point for each node.     dist <- tapply(sim$I, sim$node, function(sim_infectious) {         sum((infectious - sim_infectious)^2)     })      ## Return the distance for each node. Each proposal will be     ## accepted or rejected depending on if the distance is less than     ## the tolerance for the current generation.     dist }  ## Fit the model parameters using ABC-SMC and adaptive tolerance ## selection. The priors for the parameters are specified using a ## formula notation. Here we use a uniform distribtion for each ## parameter with lower bound = 0 and upper bound = 1. Note that we ## use a low number particles here to keep the run-time of the example ## short. In practice you would want to use many more to ensure better ## approximations. fit <- abc(model = model,            priors = c(beta ~ uniform(0, 1), gamma ~ uniform(0, 1)),            npart = 100,            ninit = 1000,            distance = distance,            verbose = TRUE)  ## Print a brief summary. fit  ## Display the ABC posterior distribution. plot(fit) } # }"},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_abc.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data frame — as.data.frame.SimInf_abc","title":"Coerce to data frame — as.data.frame.SimInf_abc","text":"Coerce data frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data frame — as.data.frame.SimInf_abc","text":"","code":"# S3 method for class 'SimInf_abc' as.data.frame(x, ...)"},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data frame — as.data.frame.SimInf_abc","text":"x R object. ... additional arguments passed methods.","code":""},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce events to a data frame — as.data.frame.SimInf_events","title":"Coerce events to a data frame — as.data.frame.SimInf_events","text":"Coerce events data frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce events to a data frame — as.data.frame.SimInf_events","text":"","code":"# S3 method for class 'SimInf_events' as.data.frame(x, ...)"},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce events to a data frame — as.data.frame.SimInf_events","text":"x R object. ... additional arguments passed methods.","code":""},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_indiv_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data frame — as.data.frame.SimInf_indiv_events","title":"Coerce to data frame — as.data.frame.SimInf_indiv_events","text":"Coerce data frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_indiv_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data frame — as.data.frame.SimInf_indiv_events","text":"","code":"# S3 method for class 'SimInf_indiv_events' as.data.frame(x, ...)"},{"path":"http://stewid.github.io/SimInf/reference/as.data.frame.SimInf_indiv_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data frame — as.data.frame.SimInf_indiv_events","text":"x R object. ... additional arguments passed methods.","code":""},{"path":"http://stewid.github.io/SimInf/reference/boxplot-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Box plot of number of individuals in each compartment — boxplot,SimInf_model-method","title":"Box plot of number of individuals in each compartment — boxplot,SimInf_model-method","text":"Produce box--whisker plot(s) number individuals model compartment.","code":""},{"path":"http://stewid.github.io/SimInf/reference/boxplot-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box plot of number of individuals in each compartment — boxplot,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' boxplot(x, compartments = NULL, index = NULL, ...)"},{"path":"http://stewid.github.io/SimInf/reference/boxplot-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box plot of number of individuals in each compartment — boxplot,SimInf_model-method","text":"x model plot compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) includes compartments. index indices specifying nodes include plotting data. Default index = NULL include nodes model. ... Additional arguments affecting plot produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/boxplot-SimInf_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box plot of number of individuals in each compartment — boxplot,SimInf_model-method","text":"","code":"## Create an 'SIR' model with 10 nodes and initialise ## it with 99 susceptible individuals and one infected ## individual. Let the model run over 100 days. model <- SIR(u0 = data.frame(S = rep(99, 10),                              I = rep(1, 10),                              R = rep(0, 10)),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the model and save the result. result <- run(model)  ## Create a boxplot that includes all compartments in all nodes. boxplot(result)   ## Create a boxplot that includes the S and I compartments in ## nodes 1 and 2. boxplot(result, ~S+I, 1:2)"},{"path":"http://stewid.github.io/SimInf/reference/continue_abc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run more generations of ABC SMC — continue_abc","title":"Run more generations of ABC SMC — continue_abc","text":"Run generations ABC SMC","code":""},{"path":"http://stewid.github.io/SimInf/reference/continue_abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run more generations of ABC SMC — continue_abc","text":"","code":"continue_abc(object, ...)  # S4 method for class 'SimInf_abc' continue_abc(   object,   tolerance = NULL,   ...,   verbose = getOption(\"verbose\", FALSE),   post_gen = NULL )"},{"path":"http://stewid.github.io/SimInf/reference/continue_abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run more generations of ABC SMC — continue_abc","text":"object SimInf_abc object continue . ... arguments passed SimInf_abc@fn. tolerance numeric matrix (number summary statistics \\(\\times\\) number generations) column contains tolerances generation row contains sequence gradually decreasing tolerances. Can also numeric vector one summary statistic. tolerance determines number generations ABC-SMC run. verbose prints diagnostic messages TRUE. default retrieve global option verbose use FALSE set. post_gen optional function , non-NULL, applied completed generation. function must accept one argument type SimInf_abc current state fitting process. function can useful , example, save inspect intermediate results.","code":""},{"path":"http://stewid.github.io/SimInf/reference/continue_abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run more generations of ABC SMC — continue_abc","text":"SimInf_abc object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/continue_pmcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run more iterations of PMCMC — continue_pmcmc","title":"Run more iterations of PMCMC — continue_pmcmc","text":"Run iterations PMCMC","code":""},{"path":"http://stewid.github.io/SimInf/reference/continue_pmcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run more iterations of PMCMC — continue_pmcmc","text":"","code":"continue_pmcmc(object, niter, verbose = getOption(\"verbose\", FALSE))  # S4 method for class 'SimInf_pmcmc' continue_pmcmc(object, niter, verbose = getOption(\"verbose\", FALSE))"},{"path":"http://stewid.github.io/SimInf/reference/continue_pmcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run more iterations of PMCMC — continue_pmcmc","text":"object SimInf_pmcmc object continue . niter integer specifying number iterations run PMCMC. verbose prints diagnostic messages TRUE. default retrieve global option verbose use FALSE set. verbose=TRUE, information printed every 100 iterations. pmcmc, possible get information every nth information specifying verbose=n, example, verbose=1 verbose=10.","code":""},{"path":"http://stewid.github.io/SimInf/reference/distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a distance matrix between nodes for spatial models — distance_matrix","title":"Create a distance matrix between nodes for spatial models — distance_matrix","text":"Calculate euclidian distances beween coordinates coordinates within cutoff.","code":""},{"path":"http://stewid.github.io/SimInf/reference/distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a distance matrix between nodes for spatial models — distance_matrix","text":"","code":"distance_matrix(x, y, cutoff, min_dist = NULL, na_fail = TRUE)"},{"path":"http://stewid.github.io/SimInf/reference/distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a distance matrix between nodes for spatial models — distance_matrix","text":"x Projected x coordinate y Projected y coordinate cutoff distance cutoff min_dist minimum distance separate two nodes.  coordinates two nodes identical, min_dist must assigned error raised.  Default NULL, .e., raise error. na_fail logical indicating whether missing values x y raise error assign zero distances involving missing values.  Default TRUE, .e., raise error.","code":""},{"path":"http://stewid.github.io/SimInf/reference/distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a distance matrix between nodes for spatial models — distance_matrix","text":"dgCMatrix","code":""},{"path":"http://stewid.github.io/SimInf/reference/distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a distance matrix between nodes for spatial models — distance_matrix","text":"","code":"## Generate a grid 10 x 10 and place one node in each cell ## separated by 100m. nodes <- expand.grid(x = (0:9) * 100, y = (0:9) * 100) plot(y ~ x, nodes)   ## Define the cutoff to only include neighbors within 300m. d <- distance_matrix(x = nodes$x, y = nodes$y, cutoff = 300)  ## View the first 10 rows and columns in the distance matrix d[1:10, 1:10] #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>                                               #>  [1,]   . 100 200 300   .   .   .   .   .   . #>  [2,] 100   . 100 200 300   .   .   .   .   . #>  [3,] 200 100   . 100 200 300   .   .   .   . #>  [4,] 300 200 100   . 100 200 300   .   .   . #>  [5,]   . 300 200 100   . 100 200 300   .   . #>  [6,]   .   . 300 200 100   . 100 200 300   . #>  [7,]   .   .   . 300 200 100   . 100 200 300 #>  [8,]   .   .   .   . 300 200 100   . 100 200 #>  [9,]   .   .   .   .   . 300 200 100   . 100 #> [10,]   .   .   .   .   .   . 300 200 100   ."},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"utility function facilitate preparing edge properties ldata model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"","code":"edge_properties_to_matrix(edges, n_nodes)"},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"edges data.frame properties assigned edge '' –> '', example, weight count. data.frame must contain columns '' '' valid indices nodes (1 <= index <= n_nodes). n_nodes total number nodes model. resulting matrix number columns equal n_nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"numeric matrix number rows equal     max(table(edges$)) * (ncol(edges) - 1) + 1     number columns equal n_nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"edge properties converted matrix row edges become sequence (index, value_1, value_2, ..., value_n) 'index' zero-based index node. reason zero-based index facilitate usage C code. sequence added '' column matrix. always least one stop value=-1 column. values matrix set NaN. See ‘Examples’.","code":""},{"path":"http://stewid.github.io/SimInf/reference/edge_properties_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an edge list with properties to a matrix — edge_properties_to_matrix","text":"","code":"## Let us consider the following edge properties. edges <- data.frame(     from  = c(  2,    3,     4,  1,   4,    5,   1,   3,   1,   3),     to    = c(  1,    1,     1,  2,   3,    3,   4,   4,   5,   5),     rate  = c(0.2, 0.01,  0.79,  1, 0.2, 0.05, 0.2, 0.8, 0.2, 0.8),     count = c(  5,    5,     5, 50,  10,   10,   5,   5,   5,   5))  ## Converting the edge properties into a matrix edge_properties_to_matrix(edges, 6) #>        [,1] [,2]  [,3] [,4] [,5] [,6] #>  [1,]  1.00    0  3.00  0.0  0.0   -1 #>  [2,]  0.20    1  0.20  0.2  0.2  NaN #>  [3,]  5.00   50 10.00  5.0  5.0  NaN #>  [4,]  2.00   -1  4.00  2.0  2.0  NaN #>  [5,]  0.01  NaN  0.05  0.8  0.8  NaN #>  [6,]  5.00  NaN 10.00  5.0  5.0  NaN #>  [7,]  3.00  NaN -1.00 -1.0 -1.0  NaN #>  [8,]  0.79  NaN   NaN  NaN  NaN  NaN #>  [9,]  5.00  NaN   NaN  NaN  NaN  NaN #> [10,] -1.00  NaN   NaN  NaN  NaN  NaN  ## Gives the following output. The first column contains first the ## properties for the edge from = 2 --> to = 1, where the first ## row is the zero-based index of from, i.e., 1. The second row ## contains the rate=0.2 and the third row count=5. On the fourth ## row starts the next sequence with the values in the second row ## in the edges data.frame. The stop value in the first column is ## on row 10. As can be seen in column 6, there are no edge ## properties for node=6. ##        [,1] [,2]  [,3] [,4] [,5] [,6] ##  [1,]  1.00    0  3.00  0.0  0.0   -1 ##  [2,]  0.20    1  0.20  0.2  0.2  NaN ##  [3,]  5.00   50 10.00  5.0  5.0  NaN ##  [4,]  2.00   -1  4.00  2.0  2.0  NaN ##  [5,]  0.01  NaN  0.05  0.8  0.8  NaN ##  [6,]  5.00  NaN 10.00  5.0  5.0  NaN ##  [7,]  3.00  NaN -1.00 -1.0 -1.0  NaN ##  [8,]  0.79  NaN   NaN  NaN  NaN  NaN ##  [9,]  5.00  NaN   NaN  NaN  NaN  NaN ## [10,] -1.00  NaN   NaN  NaN  NaN  NaN"},{"path":"http://stewid.github.io/SimInf/reference/events.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the events from a SimInf_model object — events","title":"Extract the events from a SimInf_model object — events","text":"Extract scheduled events SimInf_model object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the events from a SimInf_model object — events","text":"","code":"events(object, ...)  # S4 method for class 'SimInf_model' events(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the events from a SimInf_model object — events","text":"object model extract events . ... Additional arguments affecting generated events.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the events from a SimInf_model object — events","text":"SimInf_events object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the events from a SimInf_model object — events","text":"","code":"## Create an SIR model that includes scheduled events. model <- SIR(u0     = u0_SIR(),              tspan  = 1:(4 * 365),              events = events_SIR(),              beta   = 0.16,              gamma  = 0.077)  ## Extract the scheduled events from the model and display summary summary(events(model)) #> Number of scheduled events: 466692 #>  - Exit: 182535 (n: min = 1 max = 1 avg = 1.0) #>  - Enter: 182685 (n: min = 1 max = 1 avg = 1.0) #>  - Internal transfer: 0 #>  - External transfer: 101472 (n: min = 1 max = 1 avg = 1.0)  ## Extract the scheduled events from the model and plot them plot(events(model))"},{"path":"http://stewid.github.io/SimInf/reference/events_SEIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","title":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","text":"Example data initialize scheduled events population 1600 nodes demonstrate SEIR model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SEIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","text":"","code":"events_SEIR()"},{"path":"http://stewid.github.io/SimInf/reference/events_SEIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SEIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","text":"Example data initialize scheduled events (see SimInf_events) population 1600 nodes demonstrate SEIR model. dataset contains 466692 events 1600 nodes distributed 4 * 365 days. events divided three types: ‘Exit’ events remove individuals population (n = 182535), ‘Enter’ events add individuals population (n = 182685), ‘External transfer’ events move individuals nodes population (n = 101472). vignette contains detailed description scheduled events operate model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SEIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize events for the ‘SEIR’ model — events_SEIR","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SEIR' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SEIR() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SEIR(u0      = u0,               tspan   = tspan,               events  = events_SEIR(),               beta    = 0.16,               epsilon = 0.25,               gamma   = 0.01)  ## Display the number of individuals affected by each event type ## per day. plot(events(model))   ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)   ## Summarize the trajectory. The summary includes the number of ## events by event type. summary(result) #> Model: SEIR #> Number of nodes: 1600 #>  #> Transitions #> ----------- #>  S -> beta*S*I/(S+E+I+R) -> E #>  E -> epsilon*E -> I #>  I -> gamma*I -> R #>  #> Global data #> ----------- #>  - None #>  #> Local data #> ---------- #>  Parameter Value #>  beta      0.16  #>  epsilon   0.25  #>  gamma     0.01  #>  #> Scheduled events #> ---------------- #>  Exit: 182535 #>  Enter: 182685 #>  Internal transfer: 0 #>  External transfer: 101472 #>  #> Network summary #> --------------- #>             Min. 1st Qu. Median Mean 3rd Qu. Max. #>  Indegree:  40.0    57.0   62.0 62.1    68.0 90.0 #>  Outdegree: 36.0    57.0   62.0 62.1    67.0 89.0 #>  #> Compartments #> ------------ #>       Min. 1st Qu.  Median    Mean 3rd Qu.    Max. #>  S   0.000   5.000  13.000  55.083 111.000 221.000 #>  E   0.000   0.000   0.000   0.479   0.000  34.000 #>  I   0.000   0.000   4.000  10.865  11.000 165.000 #>  R   0.000   0.000  63.000  58.098 105.000 218.000"},{"path":"http://stewid.github.io/SimInf/reference/events_SIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize events for the ‘SIR’ model — events_SIR","title":"Example data to initialize events for the ‘SIR’ model — events_SIR","text":"Example data initialize scheduled events population 1600 nodes demonstrate SIR model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize events for the ‘SIR’ model — events_SIR","text":"","code":"events_SIR()"},{"path":"http://stewid.github.io/SimInf/reference/events_SIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize events for the ‘SIR’ model — events_SIR","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize events for the ‘SIR’ model — events_SIR","text":"Example data initialize scheduled events (see SimInf_events) population 1600 nodes demonstrate SIR model. dataset contains 466692 events 1600 nodes distributed 4 * 365 days. events divided three types: ‘Exit’ events remove individuals population (n = 182535), ‘Enter’ events add individuals population (n = 182685), ‘External transfer’ events move individuals nodes population (n = 101472). vignette contains detailed description scheduled events operate model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize events for the ‘SIR’ model — events_SIR","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SIR() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SIR(u0     = u0,              tspan  = tspan,              events = events_SIR(),              beta   = 0.16,              gamma  = 0.01)  ## Display the number of individuals affected by each event type ## per day. plot(events(model))   ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)   ## Summarize the trajectory. The summary includes the number of ## events by event type. summary(result) #> Model: SIR #> Number of nodes: 1600 #>  #> Transitions #> ----------- #>  S -> beta*S*I/(S+I+R) -> I #>  I -> gamma*I -> R #>  #> Global data #> ----------- #>  - None #>  #> Local data #> ---------- #>  Parameter Value #>  beta      0.16  #>  gamma     0.01  #>  #> Scheduled events #> ---------------- #>  Exit: 182535 #>  Enter: 182685 #>  Internal transfer: 0 #>  External transfer: 101472 #>  #> Network summary #> --------------- #>             Min. 1st Qu. Median Mean 3rd Qu. Max. #>  Indegree:  40.0    57.0   62.0 62.1    68.0 90.0 #>  Outdegree: 36.0    57.0   62.0 62.1    67.0 89.0 #>  #> Compartments #> ------------ #>     Min. 1st Qu. Median  Mean 3rd Qu.  Max. #>  S   0.0     5.0   13.0  55.6   112.0 219.0 #>  I   0.0     0.0    4.0  10.9    11.0 168.0 #>  R   0.0     0.0   62.0  58.0   105.0 221.0"},{"path":"http://stewid.github.io/SimInf/reference/events_SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize events for the ‘SIS’ model — events_SIS","title":"Example data to initialize events for the ‘SIS’ model — events_SIS","text":"Example data initialize scheduled events population 1600 nodes demonstrate SIS model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize events for the ‘SIS’ model — events_SIS","text":"","code":"events_SIS()"},{"path":"http://stewid.github.io/SimInf/reference/events_SIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize events for the ‘SIS’ model — events_SIS","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize events for the ‘SIS’ model — events_SIS","text":"Example data initialize scheduled events (see SimInf_events) population 1600 nodes demonstrate SIS model. dataset contains 466692 events 1600 nodes distributed 4 * 365 days. events divided three types: ‘Exit’ events remove individuals population (n = 182535), ‘Enter’ events add individuals population (n = 182685), ‘External transfer’ events move individuals nodes population (n = 101472). vignette contains detailed description scheduled events operate model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize events for the ‘SIS’ model — events_SIS","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIS' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SIS() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SIS(u0     = u0,              tspan  = tspan,              events = events_SIS(),              beta   = 0.16,              gamma  = 0.01)  ## Display the number of individuals affected by each event type ## per day. plot(events(model))   ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)   ## Summarize the trajectory. The summary includes the number of ## events by event type. summary(result) #> Model: SIS #> Number of nodes: 1600 #>  #> Transitions #> ----------- #>  S -> upsilon*S*I -> I #>  I -> gamma*I -> S #>  #> Global data #> ----------- #>  - None #>  #> Local data #> ---------- #>  Parameter Value #>  beta      0.16  #>  gamma     0.01  #>  #> Scheduled events #> ---------------- #>  Exit: 182535 #>  Enter: 182685 #>  Internal transfer: 0 #>  External transfer: 101472 #>  #> Network summary #> --------------- #>             Min. 1st Qu. Median Mean 3rd Qu. Max. #>  Indegree:  40.0    57.0   62.0 62.1    68.0 90.0 #>  Outdegree: 36.0    57.0   62.0 62.1    67.0 89.0 #>  #> Compartments #> ------------ #>     Min. 1st Qu. Median  Mean 3rd Qu.  Max. #>  S   0.0     7.0   10.0  44.2    96.0 218.0 #>  I   0.0     0.0   96.0  80.3   125.0 228.0"},{"path":"http://stewid.github.io/SimInf/reference/events_SISe.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize events for the ‘SISe’ model — events_SISe","title":"Example data to initialize events for the ‘SISe’ model — events_SISe","text":"Example data initialize scheduled events population 1600 nodes demonstrate SISe model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize events for the ‘SISe’ model — events_SISe","text":"","code":"events_SISe()"},{"path":"http://stewid.github.io/SimInf/reference/events_SISe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize events for the ‘SISe’ model — events_SISe","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize events for the ‘SISe’ model — events_SISe","text":"Example data initialize scheduled events (see SimInf_events) population 1600 nodes demonstrate SISe model. dataset contains 466692 events 1600 nodes distributed 4 * 365 days. events divided three types: ‘Exit’ events remove individuals population (n = 182535), ‘Enter’ events add individuals population (n = 182685), ‘External transfer’ events move individuals nodes population (n = 101472). vignette contains detailed description scheduled events operate model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize events for the ‘SISe’ model — events_SISe","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SISe' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SISe() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SISe(u0 = u0, tspan = tspan, events = events_SISe(),               phi = 0, upsilon = 1.8e-2, gamma = 0.1, alpha = 1,               beta_t1 = 1.0e-1, beta_t2 = 1.0e-1, beta_t3 = 1.25e-1,               beta_t4 = 1.25e-1, end_t1 = 91, end_t2 = 182,               end_t3 = 273, end_t4 = 365, epsilon = 0)  ## Display the number of individuals affected by each event type ## per day. plot(events(model))   ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Summarize the trajectory. The summary includes the number of ## events by event type. summary(result) #> Model: SISe #> Number of nodes: 1600 #>  #> Transitions #> ----------- #>  S -> upsilon*phi*S -> I #>  I -> gamma*I -> S #>  #> Global data #> ----------- #>  Parameter Value #>  upsilon   0.018 #>  gamma     0.100 #>  alpha     1.000 #>  beta_t1   0.100 #>  beta_t2   0.100 #>  beta_t3   0.125 #>  beta_t4   0.125 #>  epsilon   0.000 #>  #> Local data #> ---------- #>  Parameter Value #>  end_t1     91   #>  end_t2    182   #>  end_t3    273   #>  end_t4    365   #>  #> Scheduled events #> ---------------- #>  Exit: 182535 #>  Enter: 182685 #>  Internal transfer: 0 #>  External transfer: 101472 #>  #> Network summary #> --------------- #>             Min. 1st Qu. Median Mean 3rd Qu. Max. #>  Indegree:  40.0    57.0   62.0 62.1    68.0 90.0 #>  Outdegree: 36.0    57.0   62.0 62.1    67.0 89.0 #>  #> Continuous state variables #> -------------------------- #>          Min.  1st Qu.   Median     Mean  3rd Qu.     Max. #>  phi 0.00e+00 0.00e+00 0.00e+00 8.92e-08 0.00e+00 1.88e-02 #>  #> Compartments #> ------------ #>        Min.  1st Qu.   Median     Mean  3rd Qu.     Max. #>  S 1.80e+01 1.01e+02 1.22e+02 1.25e+02 1.46e+02 2.37e+02 #>  I 0.00e+00 0.00e+00 0.00e+00 1.28e-06 0.00e+00 1.00e+00"},{"path":"http://stewid.github.io/SimInf/reference/events_SISe3.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","title":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","text":"Example data initialize scheduled events population 1600 nodes demonstrate SISe3 model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","text":"","code":"data(events_SISe3)"},{"path":"http://stewid.github.io/SimInf/reference/events_SISe3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","text":"Example data initialize scheduled events (see SimInf_events) population 1600 nodes demonstrate SISe3 model. dataset contains 783773 events 1600 nodes distributed 4 * 365 days. events divided three types: ‘Exit’ events remove individuals population (n = 182535), ‘Enter’ events add individuals population (n = 182685), ‘Internal transfer’ events move individuals compartmens within one node e.g. ageing (n = 317081), ‘External transfer’ events move individuals nodes population (n = 101472). vignette contains detailed description scheduled events operate model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/events_SISe3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize events for the ‘SISe3’ model — events_SISe3","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SISe3' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. data(\"u0_SISe3\", package = \"SimInf\") data(\"events_SISe3\", package = \"SimInf\") u0_SISe3$I_1[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SISe3(u0 = u0_SISe3, tspan = tspan, events = events_SISe3,                phi = rep(0, nrow(u0_SISe3)), upsilon_1 = 1.8e-2,                upsilon_2 = 1.8e-2, upsilon_3 = 1.8e-2,                gamma_1 = 0.1, gamma_2 = 0.1, gamma_3 = 0.1,                alpha = 1, beta_t1 = 1.0e-1, beta_t2 = 1.0e-1,                beta_t3 = 1.25e-1, beta_t4 = 1.25e-1, end_t1 = 91,                end_t2 = 182, end_t3 = 273, end_t4 = 365, epsilon = 0)  ## Display the number of individuals affected by each event type ## per day. plot(events(model))   ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Summarize the trajectory. The summary includes the number of ## events by event type. summary(result) #> Model: SISe3 #> Number of nodes: 1600 #>  #> Transitions #> ----------- #>  S_1 -> upsilon_1*phi*S_1 -> I_1 #>  I_1 -> gamma_1*I_1 -> S_1 #>  S_2 -> upsilon_2*phi*S_2 -> I_2 #>  I_2 -> gamma_2*I_2 -> S_2 #>  S_3 -> upsilon_3*phi*S_3 -> I_3 #>  I_3 -> gamma_3*I_3 -> S_3 #>  #> Global data #> ----------- #>  Parameter Value #>  upsilon_1 0.018 #>  upsilon_2 0.018 #>  upsilon_3 0.018 #>  gamma_1   0.100 #>  gamma_2   0.100 #>  gamma_3   0.100 #>  alpha     1.000 #>  beta_t1   0.100 #>  beta_t2   0.100 #>  beta_t3   0.125 #>  beta_t4   0.125 #>  epsilon   0.000 #>  #> Local data #> ---------- #>  Parameter Value #>  end_t1     91   #>  end_t2    182   #>  end_t3    273   #>  end_t4    365   #>  #> Scheduled events #> ---------------- #>  Exit: 182535 #>  Enter: 182685 #>  Internal transfer: 317081 #>  External transfer: 101472 #>  #> Network summary #> --------------- #>             Min. 1st Qu. Median Mean 3rd Qu. Max. #>  Indegree:  40.0    57.0   62.0 62.1    68.0 90.0 #>  Outdegree: 36.0    57.0   62.0 62.1    67.0 89.0 #>  #> Continuous state variables #> -------------------------- #>          Min.  1st Qu.   Median     Mean  3rd Qu.     Max. #>  phi 0.00e+00 0.00e+00 0.00e+00 8.92e-08 0.00e+00 1.88e-02 #>  #> Compartments #> ------------ #>          Min.  1st Qu.   Median     Mean  3rd Qu.     Max. #>  S_1 0.00e+00 7.00e+00 9.00e+00 9.23e+00 1.20e+01 3.00e+01 #>  I_1 0.00e+00 0.00e+00 0.00e+00 1.28e-06 0.00e+00 1.00e+00 #>  S_2 0.00e+00 1.40e+01 1.80e+01 1.80e+01 2.20e+01 4.30e+01 #>  I_2 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 #>  S_3 0.00e+00 7.50e+01 9.40e+01 9.73e+01 1.19e+02 2.06e+02 #>  I_3 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00"},{"path":"http://stewid.github.io/SimInf/reference/gdata-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a global data parameter for a SimInf_model object — gdata<-","title":"Set a global data parameter for a SimInf_model object — gdata<-","text":"global data numeric vector common nodes. global data vector passed argument transition rate functions post time step function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a global data parameter for a SimInf_model object — gdata<-","text":"","code":"gdata(model, parameter) <- value  # S4 method for class 'SimInf_model' gdata(model, parameter) <- value"},{"path":"http://stewid.github.io/SimInf/reference/gdata-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a global data parameter for a SimInf_model object — gdata<-","text":"model model set global model parameter . parameter name parameter set. value numeric value.","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a global data parameter for a SimInf_model object — gdata<-","text":"SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a global data parameter for a SimInf_model object — gdata<-","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Set 'beta' to a new value gdata(model, \"beta\") <- 2  ## Extract the global data vector that is common to all nodes gdata(model) #> beta  #>    2"},{"path":"http://stewid.github.io/SimInf/reference/gdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract global data from a SimInf_model object — gdata","title":"Extract global data from a SimInf_model object — gdata","text":"global data numeric vector common nodes. global data vector passed argument transition rate functions post time step function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract global data from a SimInf_model object — gdata","text":"","code":"gdata(model)  # S4 method for class 'SimInf_model' gdata(model)"},{"path":"http://stewid.github.io/SimInf/reference/gdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract global data from a SimInf_model object — gdata","text":"model model get global data .","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract global data from a SimInf_model object — gdata","text":"numeric vector","code":""},{"path":"http://stewid.github.io/SimInf/reference/gdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract global data from a SimInf_model object — gdata","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Set 'beta' to a new value gdata(model, \"beta\") <- 2  ## Extract the global data vector that is common to all nodes gdata(model) #> beta  #>    2"},{"path":"http://stewid.github.io/SimInf/reference/get_individuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract individuals from SimInf_indiv_events — get_individuals","title":"Extract individuals from SimInf_indiv_events — get_individuals","text":"Lookup individuals, node located age specified time-point.","code":""},{"path":"http://stewid.github.io/SimInf/reference/get_individuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract individuals from SimInf_indiv_events — get_individuals","text":"","code":"get_individuals(x, time = NULL)  # S4 method for class 'SimInf_indiv_events' get_individuals(x, time = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/get_individuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract individuals from SimInf_indiv_events — get_individuals","text":"x individual events object class SimInf_indiv_events. time time-point lookup individuals. Default NULL means extract individuals minimum time-point events object x.","code":""},{"path":"http://stewid.github.io/SimInf/reference/get_individuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract individuals from SimInf_indiv_events — get_individuals","text":"data.frame columns id,     node, age.","code":""},{"path":"http://stewid.github.io/SimInf/reference/indegree.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine in-degree for each node in a model — indegree","title":"Determine in-degree for each node in a model — indegree","text":"number nodes inward external transfer events node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/indegree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine in-degree for each node in a model — indegree","text":"","code":"indegree(model)"},{"path":"http://stewid.github.io/SimInf/reference/indegree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine in-degree for each node in a model — indegree","text":"model determine -degree node model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/indegree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine in-degree for each node in a model — indegree","text":"vector -degree node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/indegree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine in-degree for each node in a model — indegree","text":"","code":"## Create an 'SIR' model with 1600 nodes and initialize ## it with example data. model <- SIR(u0 = u0_SIR(), tspan = 1:1460, events = events_SIR(),              beta   = 0.16, gamma  = 0.077)  ## Display indegree for each node in the model. plot(indegree(model))"},{"path":"http://stewid.github.io/SimInf/reference/individual_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual events — individual_events","title":"Individual events — individual_events","text":"many countries, individual-based livestock data collected enable contact tracing disease outbreaks. However, livestock databases always structured way relevant information disease spread simulations easily retrieved. aim function facilitate cleaning livestock event data prepare usage SimInf.","code":""},{"path":"http://stewid.github.io/SimInf/reference/individual_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual events — individual_events","text":"","code":"individual_events(events)"},{"path":"http://stewid.github.io/SimInf/reference/individual_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual events — individual_events","text":"events data.frame columns id, event, time, node, dest define events, see details.","code":""},{"path":"http://stewid.github.io/SimInf/reference/individual_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual events — individual_events","text":"SimInf_indiv_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/individual_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Individual events — individual_events","text":"argument events individual_events must data.frame following columns: id: integer character identifier individual. event: four event types supported: exit, enter, internal transfer, external transfer.  assigning events, can either coded numerical value character string: exit; 0 'exit', enter; 1 'enter', internal transfer; 2 'intTrans', external transfer; 3 'extTrans'. time: integer, character, date (class Date) event occured. character must able coerce Date. node: integer character identifier source node. dest: integer character identifier destination node movement events, 'dest' replaced NA non-movement events.","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/ldata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract local data from a node — ldata","title":"Extract local data from a node — ldata","text":"local data numeric vector specific node. local data vector passed argument transition rate functions post time step function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/ldata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract local data from a node — ldata","text":"","code":"ldata(model, node)  # S4 method for class 'SimInf_model' ldata(model, node)"},{"path":"http://stewid.github.io/SimInf/reference/ldata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract local data from a node — ldata","text":"model model get local data . node index node extract local data .","code":""},{"path":"http://stewid.github.io/SimInf/reference/ldata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract local data from a node — ldata","text":"numeric vector","code":""},{"path":"http://stewid.github.io/SimInf/reference/ldata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract local data from a node — ldata","text":"","code":"## Create an 'SISe' model with 1600 nodes. model <- SISe(u0 = u0_SISe(), tspan = 1:100, events = events_SISe(),               phi = 0, upsilon = 1.8e-2, gamma = 0.1, alpha = 1,               beta_t1 = 1.0e-1, beta_t2 = 1.0e-1, beta_t3 = 1.25e-1,               beta_t4 = 1.25e-1, end_t1 = c(91, 101), end_t2 = c(182, 185),               end_t3 = c(273, 275), end_t4 = c(365, 360), epsilon = 0)  ## Display local data from the first two nodes. ldata(model, node = 1) #> end_t1 end_t2 end_t3 end_t4  #>     91    182    273    365  ldata(model, node = 2) #> end_t1 end_t2 end_t3 end_t4  #>    101    185    275    360"},{"path":"http://stewid.github.io/SimInf/reference/length-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the MCMC chain — length,SimInf_pmcmc-method","title":"Length of the MCMC chain — length,SimInf_pmcmc-method","text":"Length MCMC chain","code":""},{"path":"http://stewid.github.io/SimInf/reference/length-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the MCMC chain — length,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' length(x)"},{"path":"http://stewid.github.io/SimInf/reference/length-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the MCMC chain — length,SimInf_pmcmc-method","text":"x SimInf_pmcmc object determine length MCMC chain .","code":""},{"path":"http://stewid.github.io/SimInf/reference/logLik-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Log likelihood — logLik,SimInf_pfilter-method","title":"Log likelihood — logLik,SimInf_pfilter-method","text":"Extract estimated log likelihood SimInf_pfilter object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/logLik-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log likelihood — logLik,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' logLik(object)"},{"path":"http://stewid.github.io/SimInf/reference/logLik-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log likelihood — logLik,SimInf_pfilter-method","text":"object SimInf_pfilter object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/logLik-SimInf_pfilter-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log likelihood — logLik,SimInf_pfilter-method","text":"estimated log likelihood.","code":""},{"path":"http://stewid.github.io/SimInf/reference/mparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Model parser to define new models to run in SimInf — mparse","title":"Model parser to define new models to run in SimInf — mparse","text":"Describe model logical way R. mparse creates SimInf_model object model definition ready run.","code":""},{"path":"http://stewid.github.io/SimInf/reference/mparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model parser to define new models to run in SimInf — mparse","text":"","code":"mparse(   transitions = NULL,   compartments = NULL,   ldata = NULL,   gdata = NULL,   u0 = NULL,   v0 = NULL,   tspan = NULL,   events = NULL,   E = NULL,   N = NULL,   pts_fun = NULL,   use_enum = FALSE )"},{"path":"http://stewid.github.io/SimInf/reference/mparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model parser to define new models to run in SimInf — mparse","text":"transitions character vector containing transitions form \"X -> ... -> Y\". left (right) side initial (final) state propensity written ->-signs. special symbol @ reserved empty set. example, transitions = c(\"S -> beta*S*/(S++R) -> \", \"-> gamma*-> R\") expresses SIR model. also possible define variables can used calculations propensities calculations variables. variable defined operator <-. Using variable size population, SIR model can instead written transitions = c(\"S -> beta*S*/N -> \", \"-> gamma*-> R\", \"N <- S++R\"). default, type variable defined double generated C code, possible also define integer writing (int) variable name. example, SIR model, population size can defined \"(int)N <- S++R\". also possible explicitly use (double) front variable name, needed default. Note order propensities variables matter. compartments contains names involved compartments, example, compartments = c(\"S\", \"\", \"R\"). ldata optional data nodes. Can specified data.frame one row per node, numeric matrix column ldata[, j] contains local data vector node j, named vector model contains one node. ldata specified data.frame, column one parameter. v0 specified matrix, must row names identify parameters transitions. v0 specified named vector, names identify parameters. local data vector passed argument transition rate functions post time step function. gdata optional data common nodes model. Can specified either named numeric vector one-row data.frame. names used identify parameters transitions. global data vector passed argument transition rate functions post time step function. u0 data.frame initial state node, .e., number individuals compartment node simulation starts (see ‘Details’). parameter u0 can also object can coerced data.frame, e.g., named numeric vector coerced one row data.frame. v0 optional data initial continuous state node. v0 can specified data.frame one row per node, numeric matrix column v0[, j] contains initial state vector node j, named vector model contains one node. v0 specified data.frame, column one parameter. v0 specified matrix, row names identify parameters. v0 specified named vector, names identify parameters. ‘v’ vector passed argument transition rate functions post time step function. continuous state can updated post time step function. tspan vector (length >= 1) increasing time points state node returned. Can either integer Date vector. Date vector coerced numeric vector days, tspan[1] becomes day year first year tspan. dates added names numeric vector. events data.frame scheduled events. Default NULL .e. scheduled events model. E matrix handle scheduled events, see SimInf_events. Default NULL .e. scheduled events model. N matrix handle scheduled events, see SimInf_events. Default NULL .e. scheduled events model. pts_fun optional character vector C code post time step function. C code contain body function .e. code opening closing curly brackets. use_enum generate enumeration constants indices parameter 'u', 'v', 'ldata', 'gdata' vectors generated C code. name enumeration constant transformed upper-case name corresponding parameter, example, parameter 'beta' become 'BETA'. Using enumeration constants can make easier modify C code afterwards, writing C code pts_fun parameter. Default FALSE, .e., parameters specified using integer indices parameters.","code":""},{"path":"http://stewid.github.io/SimInf/reference/mparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model parser to define new models to run in SimInf — mparse","text":"SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/mparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model parser to define new models to run in SimInf — mparse","text":"","code":"if (FALSE) { # \\dontrun{ ## Use the model parser to create a 'SimInf_model' object that ## expresses the SIR model, where 'beta' is the transmission rate ## and 'gamma' is the recovery rate. model  <- mparse(transitions = c(\"S -> beta*S*I/N -> I\",                                  \"I -> gamma*I -> R\",                                  \"N <- S+I+R\"),                  compartments = c(\"S\", \"I\", \"R\"),                  gdata = c(beta = 0.16, gamma = 0.077),                  u0 = data.frame(S = 100, I = 1, R = 0),                  tspan = 1:100)  ## Run and plot the result set.seed(22) result <- run(model) plot(result) } # }"},{"path":"http://stewid.github.io/SimInf/reference/n_generations.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the number of generations — n_generations","title":"Determine the number of generations — n_generations","text":"Determine number generations","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_generations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the number of generations — n_generations","text":"","code":"n_generations(object)  # S4 method for class 'SimInf_abc' n_generations(object)"},{"path":"http://stewid.github.io/SimInf/reference/n_generations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the number of generations — n_generations","text":"object SimInf_abc object determine number generations .","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_generations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the number of generations — n_generations","text":"integer number generations.","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the number of nodes in a model — n_nodes","title":"Determine the number of nodes in a model — n_nodes","text":"Determine number nodes model","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the number of nodes in a model — n_nodes","text":"","code":"n_nodes(model)  # S4 method for class 'SimInf_model' n_nodes(model)"},{"path":"http://stewid.github.io/SimInf/reference/n_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the number of nodes in a model — n_nodes","text":"model model object extract number nodes .","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the number of nodes in a model — n_nodes","text":"number nodes model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/n_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the number of nodes in a model — n_nodes","text":"","code":"## Create an 'SIR' model with 100 nodes, with 99 susceptible, ## 1 infected and 0 recovered in each node. u0 <- data.frame(S = rep(99, 100), I = rep(1, 100), R = rep(0, 100)) model <- SIR(u0 = u0, tspan = 1:10, beta = 0.16, gamma = 0.077)  ## Display the number of nodes in the model. n_nodes(model) #> [1] 100"},{"path":"http://stewid.github.io/SimInf/reference/node_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform individual events to node events for a model — node_events","title":"Transform individual events to node events for a model — node_events","text":"many countries, individual-based livestock data collected enable contact tracing disease outbreaks. However, livestock databases always structured way relevant information disease spread simulations easily retrieved. aim function facilitate cleaning livestock event data prepare usage SimInf.","code":""},{"path":"http://stewid.github.io/SimInf/reference/node_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform individual events to node events for a model — node_events","text":"","code":"node_events(x, time = NULL, target = NULL, age = NULL)  # S4 method for class 'SimInf_indiv_events' node_events(x, time = NULL, target = NULL, age = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/node_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform individual events to node events for a model — node_events","text":"x individual events object class SimInf_indiv_events. time events occur ‘time’ included. Default NULL means extract events minimum time-point SimInf_indiv_events object. target SimInf model ('SEIR', 'SIR', 'SIS', 'SISe3', 'SISe3_sp', 'SISe', 'SISe_sp') target events u0 . default, NULL, creates events might post-processed fit specific use case. age Integer vector break points days ageing events.","code":""},{"path":"http://stewid.github.io/SimInf/reference/node_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform individual events to node events for a model — node_events","text":"data.frame columns event,     time, node, dest, n,     proportion, select, shift.","code":""},{"path":"http://stewid.github.io/SimInf/reference/node_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform individual events to node events for a model — node_events","text":"individual-based events aggregated node-level.  select value determined event type age category.  one age category, .e., age=NULL, select=1 enter events, select=2 events. two age categories, select=1 enter events first age category, select=2 enter events second age category. Similarly, select=3 events first age category, select=4 events first second category. three age categories, works similarly select=1,2,3 enter events age category, respectively. select=4,5,6 events.","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data with spatial distribution of nodes — nodes","title":"Example data with spatial distribution of nodes — nodes","text":"Example data initialize population 1600 nodes demonstrate various models.","code":""},{"path":"http://stewid.github.io/SimInf/reference/nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data with spatial distribution of nodes — nodes","text":"","code":"data(nodes)"},{"path":"http://stewid.github.io/SimInf/reference/nodes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data with spatial distribution of nodes — nodes","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data with spatial distribution of nodes — nodes","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SIR() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SIR(u0     = u0,              tspan  = tspan,              events = events_SIR(),              beta   = 0.16,              gamma  = 0.077)  ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Determine nodes with one or more infected individuals in the ## trajectory. Extract the 'I' compartment and check for any ## infected individuals in each node. infected <- colSums(trajectory(result, ~ I, format = \"matrix\")) > 0  ## Display infected nodes in 'blue' and non-infected nodes in 'yellow'. data(\"nodes\", package = \"SimInf\") col <- ifelse(infected, \"blue\", \"yellow\") plot(y ~ x, nodes, col = col, pch = 20, cex = 2) } # }"},{"path":"http://stewid.github.io/SimInf/reference/outdegree.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine out-degree for each node in a model — outdegree","title":"Determine out-degree for each node in a model — outdegree","text":"number nodes connected external transfer events node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/outdegree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine out-degree for each node in a model — outdegree","text":"","code":"outdegree(model)"},{"path":"http://stewid.github.io/SimInf/reference/outdegree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine out-degree for each node in a model — outdegree","text":"model determine -degree node model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/outdegree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine out-degree for each node in a model — outdegree","text":"vector -degree node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/outdegree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine out-degree for each node in a model — outdegree","text":"","code":"## Create an 'SIR' model with 1600 nodes and initialize ## it with example data. model <- SIR(u0 = u0_SIR(), tspan = 1:1460, events = events_SIR(),              beta   = 0.16, gamma  = 0.077)  ## Display outdegree for each node in the model. plot(outdegree(model))"},{"path":"http://stewid.github.io/SimInf/reference/package_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a package skeleton from a SimInf_model — package_skeleton","title":"Create a package skeleton from a SimInf_model — package_skeleton","text":"Describe model logical way R, mparse creates SimInf_model object model definition can installed add-R package.","code":""},{"path":"http://stewid.github.io/SimInf/reference/package_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a package skeleton from a SimInf_model — package_skeleton","text":"","code":"package_skeleton(   model,   name = NULL,   path = \".\",   author = NULL,   email = NULL,   maintainer = NULL,   license = \"GPL-3\" )"},{"path":"http://stewid.github.io/SimInf/reference/package_skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a package skeleton from a SimInf_model — package_skeleton","text":"model model SimInf_model object model create package skeleton . name Character string package name. contain (ASCII) letters, numbers dot, least two characters start letter end dot. package name also used class name model directory name package. path Path put package directory . Default '.' .e. current directory. author Author package. email Email package maintainer. maintainer Maintainer package. license License package. Default 'GPL-3'.","code":""},{"path":"http://stewid.github.io/SimInf/reference/package_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a package skeleton from a SimInf_model — package_skeleton","text":"invisible NULL.","code":""},{"path":"http://stewid.github.io/SimInf/reference/package_skeleton.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a package skeleton from a SimInf_model — package_skeleton","text":"Read Writing R Extensions manual     details. created source package need install : see R Installation Administration manual, INSTALL install.packages.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pairs-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot of number of individuals in each compartment — pairs,SimInf_model-method","title":"Scatterplot of number of individuals in each compartment — pairs,SimInf_model-method","text":"matrix scatterplots number individuals compartment produced. ijth scatterplot contains x[,] plotted x[,j].","code":""},{"path":"http://stewid.github.io/SimInf/reference/pairs-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot of number of individuals in each compartment — pairs,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' pairs(x, compartments = NULL, index = NULL, ...)"},{"path":"http://stewid.github.io/SimInf/reference/pairs-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot of number of individuals in each compartment — pairs,SimInf_model-method","text":"x model plot compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) includes compartments. index indices specifying nodes include plotting data. Default index = NULL include nodes model. ... Additional arguments affecting plot produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pairs-SimInf_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot of number of individuals in each compartment — pairs,SimInf_model-method","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 10 nodes and initialise ## it with 99 susceptible individuals and one infected ## individual. Let the model run over 100 days. model <- SIR(u0 = data.frame(S = rep(99, 10),                              I = rep(1, 10),                              R = rep(0, 10)),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the model and save the result. result <- run(model)  ## Create a scatter plot that includes all compartments in all ## nodes. pairs(result)   ## Create a scatter plot that includes the S and I compartments in ## nodes 1 and 2. pairs(result, ~S+I, 1:2)"},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap particle filter — pfilter","title":"Bootstrap particle filter — pfilter","text":"bootstrap filtering algorithm. Systematic resampling performed observation.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap particle filter — pfilter","text":"","code":"pfilter(model, obs_process, data, npart, init_model = NULL)  # S4 method for class 'SimInf_model' pfilter(model, obs_process, data, npart, init_model = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap particle filter — pfilter","text":"model SimInf_model object simulate data . obs_process Specification stochastic observation process. obs_process can specified formula model contains one node one data point time data. left hand side formula must match column name data data.frame right hand side formula character specifying distribution observation process, example, Iobs ~ poisson(). following distributions supported: x ~ binomial(size, prob), x ~ poisson(rate) x ~ uniform(min, max). observation process can also function evaluate probability density observations given simulated states. first argument passed obs_process function result run model contains one trajectory simulated data time-point. second argument obs_process function data.frame containing rows specific time-point function called . Note function must return log density. data data.frame holding time series data. npart integer number particles (> 1) use timestep. init_model optional function , non-NULL, applied running proposal. function must accept one argument type SimInf_model current model fitting process. function can useful specify initial state u0 v0 model running trajectory proposed parameters.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap particle filter — pfilter","text":"SimInf_pfilter object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap particle filter — pfilter","text":"1993","code":""},{"path":"http://stewid.github.io/SimInf/reference/pfilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap particle filter — pfilter","text":"","code":"if (FALSE) { # \\dontrun{ ## Let us consider an SIR model in a closed population with N = 100 ## individuals of whom one is initially infectious and the rest are ## susceptible. First, generate one realisation (with a specified ## seed) from the model with known parameters 'beta = 0.16' and ## 'gamma = 0.077'. Then, use 'pfilter' to apply the bootstrap ## particle algorithm on the simulated data. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = seq(1, 100, by = 3),              beta = 0.16,              gamma = 0.077)  ## Run the SIR model to generate simulated observed data for the ## number of infected individuals. set.seed(22) infected <- trajectory(run(model), \"I\")[, c(\"time\", \"I\")] colnames(infected) <- c(\"time\", \"Iobs\")  ## Use a Poison observation process for the infected individuals, such ## that 'Iobs ~ poison(I + 1e-6)'. A small constant '1e-6' is added to ## prevent numerical errors, since the simulated counts 'I' could be ## zero, which would result in the Poisson rate parameter being zero, ## which violates the conditions of the Poisson distribution. Use 1000 ## particles. pf <- pfilter(model,               obs_process = Iobs ~ poisson(I + 1e-6),               data = infected,               npart = 1000)  ## Print a brief summary. pf  ## Compare the number infected 'I' in the filtered trajectory with the ## infected 'Iobs' in the observed data. plot(pf, ~I) lines(Iobs ~ time, infected, col = \"blue\", lwd = 2, type = \"s\") } # }"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_abc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the ABC posterior distribution — plot,SimInf_abc-method","title":"Display the ABC posterior distribution — plot,SimInf_abc-method","text":"Display ABC posterior distribution","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_abc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the ABC posterior distribution — plot,SimInf_abc-method","text":"","code":"# S4 method for class 'SimInf_abc' plot(x, y, ...)"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_abc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the ABC posterior distribution — plot,SimInf_abc-method","text":"x SimInf_abc object plot. y generation plot. default display last generation. ... Additional arguments affecting plot.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the distribution of scheduled events over time — plot,SimInf_events-method","title":"Display the distribution of scheduled events over time — plot,SimInf_events-method","text":"Display distribution scheduled events time","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the distribution of scheduled events over time — plot,SimInf_events-method","text":"","code":"# S4 method for class 'SimInf_events' plot(x, frame.plot = FALSE, ...)"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the distribution of scheduled events over time — plot,SimInf_events-method","text":"x events data plot. frame.plot Draw frame around plot. Default FALSE. ... Additional arguments affecting plot","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_indiv_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the distribution of individual events over time — plot,SimInf_indiv_events-method","title":"Display the distribution of individual events over time — plot,SimInf_indiv_events-method","text":"Display distribution individual events time","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_indiv_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the distribution of individual events over time — plot,SimInf_indiv_events-method","text":"","code":"# S4 method for class 'SimInf_indiv_events' plot(x, frame.plot = FALSE, ...)"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_indiv_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the distribution of individual events over time — plot,SimInf_indiv_events-method","text":"x individual events data plot. frame.plot logical indicating whether box drawn around plot. ... graphical parameters passed plot function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plot of a particle filter object — plot,SimInf_pfilter-method","title":"Diagnostic plot of a particle filter object — plot,SimInf_pfilter-method","text":"Diagnostic plot particle filter object","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plot of a particle filter object — plot,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' plot(x, y, ...)"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plot of a particle filter object — plot,SimInf_pfilter-method","text":"x SimInf_pfilter object plot. y y NULL missing (default), filtered trajectory (top) effective sample size (bottom) displayed. y character vector formula, plot function SimInf_model object called filtered trajectory, see plot,SimInf_model-method details specification plot. ... graphical parameters passed plot function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the PMCMC posterior distribution — plot,SimInf_pmcmc-method","title":"Display the PMCMC posterior distribution — plot,SimInf_pmcmc-method","text":"Display (approximate) posterior distributions obtained      fitting particle Markov chain Monte Carlo algorithm,      corresponding trace plots.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the PMCMC posterior distribution — plot,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' plot(x, y, start = 1, end = NULL, thin = 1, ...)"},{"path":"http://stewid.github.io/SimInf/reference/plot-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the PMCMC posterior distribution — plot,SimInf_pmcmc-method","text":"x SimInf_pmcmc object plot. y trace variables logPost plotted y = \"trace\" y = ~trace, else posterior distributions plotted. Default plot posterier distributions. start start iteration remove burn-iterations. Default start = 1. end last iteration include. Default NULL set end last iteration chain. thin keep every thin iteration start iteration. Default thin = 1, .e., keep every iteration. ... Additional arguments affecting plot.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the outcome from a simulated trajectory — plot,SimInf_model-method","title":"Display the outcome from a simulated trajectory — plot,SimInf_model-method","text":"Plot either median quantile range counts nodes, plot counts specified nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the outcome from a simulated trajectory — plot,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' plot(   x,   y,   level = 1,   index = NULL,   range = 0.5,   type = \"s\",   lwd = 2,   frame.plot = FALSE,   legend = TRUE,   ... )"},{"path":"http://stewid.github.io/SimInf/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the outcome from a simulated trajectory — plot,SimInf_model-method","text":"x model plot. y Character vector formula compartments model include plot. Default includes compartments model. Can also formula specifies compartments define cases disease specific characteristic (numerator), compartments define entire population interest (denominator). left-hand-side formula defines cases, right-hand-side defines population, example, ~S++R ‘SIR’ model (see ‘Examples’). .  (dot) expanded compartments, example, ~.  expanded ~S++R ‘SIR’ model (see ‘Examples’). level level prevalence calculated time point tspan. 1 (population prevalence): calculates proportion individuals (cases) population. 2 (node prevalence): calculates proportion nodes least one case. 3 (within-node prevalence): calculates proportion cases within node. Default 1. index Indices specifying nodes include plotting data. Plot one line node. Default (index = NULL) extract data nodes plot median count specified compartments. range Show quantile range count compartment. Default show interquartile range .e. middle 50% count transparent color. median value shown color. Use range = 0.95 show middle 95% count. display individual lines node, specify range = FALSE. type type plot draw. default type = \"s\" draws stair steps. See base plot values. lwd line width. Default 2. frame.plot logical indicating whether box drawn around plot. legend logical indicating whether legend compartments added plot. legend drawn prevalence plot. ... graphical parameters passed plot function.","code":""},{"path":"http://stewid.github.io/SimInf/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the outcome from a simulated trajectory — plot,SimInf_model-method","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 100 nodes and initialise ## it with 990 susceptible individuals and 10 infected ## individuals in each node. Run the model over 100 days. model <- SIR(u0 = data.frame(S = rep(990, 100),                              I = rep(10, 100),                              R = rep(0, 100)),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the model and save the result. result <- run(model)  ## Plot the median and interquartile range of the number ## of susceptible, infected and recovered individuals. plot(result)  ## Plot the median and the middle 95\\ ## number of susceptible, infected and recovered individuals. plot(result, range = 0.95)  ## Plot the median and interquartile range of the  number ## of infected individuals. plot(result, \"I\")  ## Use the formula notation instead to plot the median and ## interquartile range of the number of infected individuals. plot(result, ~I)  ## Plot the number of susceptible, infected ## and recovered individuals in the first ## three nodes. plot(result, index = 1:3, range = FALSE)  ## Use plot type line instead. plot(result, index = 1:3, range = FALSE, type = \"l\")  ## Plot the number of infected individuals in the first node. plot(result, \"I\", index = 1, range = FALSE)  ## Plot the proportion of infected individuals (cases) ## in the population. plot(result, I ~ S + I + R)  ## Plot the proportion of nodes with infected individuals. plot(result, I ~ S + I + R, level = 2)  ## Plot the median and interquartile range of the proportion ## of infected individuals in each node plot(result, I ~ S + I + R, level = 3)  ## Plot the proportion of infected individuals in the first ## three nodes. plot(result, I ~ S + I + R, level = 3, index = 1:3, range = FALSE) } # }"},{"path":"http://stewid.github.io/SimInf/reference/pmcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Particle Markov chain Monte Carlo (PMCMC) algorithm — pmcmc","title":"Particle Markov chain Monte Carlo (PMCMC) algorithm — pmcmc","text":"Particle Markov chain Monte Carlo (PMCMC) algorithm","code":""},{"path":"http://stewid.github.io/SimInf/reference/pmcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particle Markov chain Monte Carlo (PMCMC) algorithm — pmcmc","text":"","code":"pmcmc(model, ...)  # S4 method for class 'SimInf_model' pmcmc(   model,   obs_process,   data,   priors,   npart,   niter,   theta = NULL,   covmat = NULL,   adaptmix = 0.05,   adaptive = 100,   init_model = NULL,   post_particle = NULL,   record = TRUE,   verbose = getOption(\"verbose\", FALSE) )  # S4 method for class 'SimInf_abc' pmcmc(   model,   obs_process,   data,   npart,   niter,   adaptmix = 0.05,   adaptive = 100,   post_particle = NULL,   record = TRUE,   verbose = getOption(\"verbose\", FALSE) )"},{"path":"http://stewid.github.io/SimInf/reference/pmcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Particle Markov chain Monte Carlo (PMCMC) algorithm — pmcmc","text":"model model simulate data . ... arguments passed specific methods. obs_process Specification stochastic observation process. obs_process can specified formula model contains one node one data point time data. left hand side formula must match column name data data.frame right hand side formula character specifying distribution observation process, example, Iobs ~ poisson(). following distributions supported: x ~ binomial(size, prob), x ~ poisson(rate) x ~ uniform(min, max). observation process can also function evaluate probability density observations given simulated states. first argument passed obs_process function result run model contains one trajectory simulated data time-point. second argument obs_process function data.frame containing rows specific time-point function called . Note function must return log density. data data.frame holding time series data. priors priors parameters fit. prior specified formula notation, example, beta ~ uniform(0, 1) specifies beta uniformly distributed 0 1. Use c() provide one prior, example, c(beta ~ uniform(0, 1), gamma ~ normal(10, 1)). following distributions supported: gamma, lognormal, normal uniform. parameters priors must either gdata ldata. npart integer number particles (> 1) use timestep. niter integer specifying number iterations run PMCMC. theta named vector initial values parameters model.  Default NULL, sampled prior distribution(s). covmat named numeric (npars x npars) matrix covariances use initial proposal matrix. left unspecified defaults diag((theta/10)^2/npars). adaptmix Mixing proportion adaptive proposal.  Must value zero one. Default adaptmix = 0.05. adaptive Controls start adaptive update. Must greater equal zero. adaptive=0, adaptive update performed. Default adaptive = 100. init_model FIXME. post_particle optional function , non-NULL, applied completed particle. function must accept three arguments: 1) object SimInf_pmcmc current state fitting process, 2) object SimInf_pfilter last particle one filtered trajectory attached, 3) integer iteration fitting process. function can useful , example, monitor, save inspect intermediate results. record FIXME verbose prints diagnostic messages TRUE. default retrieve global option verbose use FALSE set. verbose=TRUE, information printed every 100 iterations. pmcmc, possible get information every nth information specifying verbose=n, example, verbose=1 verbose=10.","code":""},{"path":"http://stewid.github.io/SimInf/reference/pmcmc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Particle Markov chain Monte Carlo (PMCMC) algorithm — pmcmc","text":"2010 2009","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","title":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","text":"Calculate proportion individuals disease population, proportion nodes least one diseased individual, proportion individuals disease node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' prevalence(model, formula, level, index, format = c(\"data.frame\", \"matrix\"))"},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","text":"model model trajectory data calculate prevalence . formula formula specifies compartments define cases disease specific characteristic (numerator), compartments define entire population interest (denominator). left-hand-side formula defines cases, right-hand-side defines population, example, ~S++R ‘SIR’ model (see ‘Examples’). .  (dot) expanded compartments, example, ~.  expanded ~S++R ‘SIR’ model (see ‘Examples’). formula can also contain condition (indicated |) node time step control population include calculation, example, ~ . | R == 0 calculate prevalence recovered zero ‘SIR’ model. condition must evaluate TRUE FALSE node time step. Please note, denominator zero, prevalence NaN. Additionally, level=3 (within-node prevalence) formula contains condition evaluates FALSE, prevalence also NaN. level level prevalence calculated time point tspan. 1 (population prevalence): calculates proportion individuals (cases) population. 2 (node prevalence): calculates proportion nodes least one case. 3 (within-node prevalence): calculates proportion cases within node. Default 1. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. format default (format = \"data.frame\") generate data.frame one row per time-step prevalence. Using format = \"matrix\" returns result matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_model-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","text":"data.frame format = \"data.frame\", else     matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prevalence from a model object with trajectory data — prevalence,SimInf_model-method","text":"","code":"## Create an 'SIR' model with 6 nodes and initialize ## it to run over 10 days. u0 <- data.frame(S = 100:105, I = c(0, 1, 0, 2, 0, 3), R = rep(0, 6)) model <- SIR(u0 = u0, tspan = 1:10, beta = 0.16, gamma = 0.077)  ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Determine the proportion of infected individuals (cases) ## in the population at the time-points in 'tspan'. prevalence(result, I ~ S + I + R) #>    time prevalence #> 1     1 0.01127214 #> 2     2 0.01288245 #> 3     3 0.01127214 #> 4     4 0.01288245 #> 5     5 0.01449275 #> 6     6 0.01449275 #> 7     7 0.01771337 #> 8     8 0.01610306 #> 9     9 0.01449275 #> 10   10 0.01610306  ## Identical result is obtained with the shorthand 'I~.' prevalence(result, I ~ .) #>    time prevalence #> 1     1 0.01127214 #> 2     2 0.01288245 #> 3     3 0.01127214 #> 4     4 0.01288245 #> 5     5 0.01449275 #> 6     6 0.01449275 #> 7     7 0.01771337 #> 8     8 0.01610306 #> 9     9 0.01449275 #> 10   10 0.01610306  ## Determine the proportion of nodes with infected individuals at ## the time-points in 'tspan'. prevalence(result, I ~ S + I + R, level = 2) #>    time prevalence #> 1     1        0.5 #> 2     2        0.5 #> 3     3        0.5 #> 4     4        0.5 #> 5     5        0.5 #> 6     6        0.5 #> 7     7        0.5 #> 8     8        0.5 #> 9     9        0.5 #> 10   10        0.5  ## Determine the proportion of infected individuals in each node ## at the time-points in 'tspan'. prevalence(result, I ~ S + I + R, level = 3) #>    node time  prevalence #> 1     1    1 0.000000000 #> 2     2    1 0.009803922 #> 3     3    1 0.000000000 #> 4     4    1 0.019047619 #> 5     5    1 0.000000000 #> 6     6    1 0.037037037 #> 7     1    2 0.000000000 #> 8     2    2 0.009803922 #> 9     3    2 0.000000000 #> 10    4    2 0.019047619 #> 11    5    2 0.000000000 #> 12    6    2 0.046296296 #> 13    1    3 0.000000000 #> 14    2    3 0.009803922 #> 15    3    3 0.000000000 #> 16    4    3 0.019047619 #> 17    5    3 0.000000000 #> 18    6    3 0.037037037 #> 19    1    4 0.000000000 #> 20    2    4 0.019607843 #> 21    3    4 0.000000000 #> 22    4    4 0.019047619 #> 23    5    4 0.000000000 #> 24    6    4 0.037037037 #> 25    1    5 0.000000000 #> 26    2    5 0.019607843 #> 27    3    5 0.000000000 #> 28    4    5 0.028571429 #> 29    5    5 0.000000000 #> 30    6    5 0.037037037 #> 31    1    6 0.000000000 #> 32    2    6 0.019607843 #> 33    3    6 0.000000000 #> 34    4    6 0.028571429 #> 35    5    6 0.000000000 #> 36    6    6 0.037037037 #> 37    1    7 0.000000000 #> 38    2    7 0.019607843 #> 39    3    7 0.000000000 #> 40    4    7 0.028571429 #> 41    5    7 0.000000000 #> 42    6    7 0.055555556 #> 43    1    8 0.000000000 #> 44    2    8 0.009803922 #> 45    3    8 0.000000000 #> 46    4    8 0.028571429 #> 47    5    8 0.000000000 #> 48    6    8 0.055555556 #> 49    1    9 0.000000000 #> 50    2    9 0.009803922 #> 51    3    9 0.000000000 #> 52    4    9 0.028571429 #> 53    5    9 0.000000000 #> 54    6    9 0.046296296 #> 55    1   10 0.000000000 #> 56    2   10 0.009803922 #> 57    3   10 0.000000000 #> 58    4   10 0.028571429 #> 59    5   10 0.000000000 #> 60    6   10 0.055555556  ## Determine the proportion of infected individuals in each node ## at the time-points in 'tspan' when the number of recovered is ## zero. prevalence(result, I ~ S + I + R | R == 0, level = 3) #>    node time  prevalence #> 1     1    1 0.000000000 #> 2     2    1 0.009803922 #> 3     3    1 0.000000000 #> 4     4    1 0.019047619 #> 5     5    1 0.000000000 #> 6     6    1 0.037037037 #> 7     1    2 0.000000000 #> 8     2    2 0.009803922 #> 9     3    2 0.000000000 #> 10    4    2 0.019047619 #> 11    5    2 0.000000000 #> 12    6    2 0.046296296 #> 13    1    3 0.000000000 #> 14    2    3 0.009803922 #> 15    3    3 0.000000000 #> 16    4    3 0.019047619 #> 17    5    3 0.000000000 #> 18    6    3         NaN #> 19    1    4 0.000000000 #> 20    2    4 0.019607843 #> 21    3    4 0.000000000 #> 22    4    4 0.019047619 #> 23    5    4 0.000000000 #> 24    6    4         NaN #> 25    1    5 0.000000000 #> 26    2    5 0.019607843 #> 27    3    5 0.000000000 #> 28    4    5 0.028571429 #> 29    5    5 0.000000000 #> 30    6    5         NaN #> 31    1    6 0.000000000 #> 32    2    6 0.019607843 #> 33    3    6 0.000000000 #> 34    4    6 0.028571429 #> 35    5    6 0.000000000 #> 36    6    6         NaN #> 37    1    7 0.000000000 #> 38    2    7 0.019607843 #> 39    3    7 0.000000000 #> 40    4    7 0.028571429 #> 41    5    7 0.000000000 #> 42    6    7         NaN #> 43    1    8 0.000000000 #> 44    2    8         NaN #> 45    3    8 0.000000000 #> 46    4    8 0.028571429 #> 47    5    8 0.000000000 #> 48    6    8         NaN #> 49    1    9 0.000000000 #> 50    2    9         NaN #> 51    3    9 0.000000000 #> 52    4    9 0.028571429 #> 53    5    9 0.000000000 #> 54    6    9         NaN #> 55    1   10 0.000000000 #> 56    2   10         NaN #> 57    3   10 0.000000000 #> 58    4   10 0.028571429 #> 59    5   10 0.000000000 #> 60    6   10         NaN"},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract prevalence from running a particle filter — prevalence,SimInf_pfilter-method","title":"Extract prevalence from running a particle filter — prevalence,SimInf_pfilter-method","text":"Extract prevalence running particle filter","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract prevalence from running a particle filter — prevalence,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' prevalence(model, formula, level, index, format = c(\"data.frame\", \"matrix\"))"},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract prevalence from running a particle filter — prevalence,SimInf_pfilter-method","text":"model SimInf_pfilter object extract prevalence . formula formula specifies compartments define cases disease specific characteristic (numerator), compartments define entire population interest (denominator). left-hand-side formula defines cases, right-hand-side defines population, example, ~S++R ‘SIR’ model (see ‘Examples’). .  (dot) expanded compartments, example, ~.  expanded ~S++R ‘SIR’ model (see ‘Examples’). formula can also contain condition (indicated |) node time step control population include calculation, example, ~ . | R == 0 calculate prevalence recovered zero ‘SIR’ model. condition must evaluate TRUE FALSE node time step. Please note, denominator zero, prevalence NaN. Additionally, level=3 (within-node prevalence) formula contains condition evaluates FALSE, prevalence also NaN. level level prevalence calculated time point tspan. 1 (population prevalence): calculates proportion individuals (cases) population. 2 (node prevalence): calculates proportion nodes least one case. 3 (within-node prevalence): calculates proportion cases within node. Default 1. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. format default (format = \"data.frame\") generate data.frame one row per time-step prevalence. Using format = \"matrix\" returns result matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pfilter-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract prevalence from running a particle filter — prevalence,SimInf_pfilter-method","text":"data.frame format = \"data.frame\", else     matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract prevalence from fitting a PMCMC algorithm — prevalence,SimInf_pmcmc-method","title":"Extract prevalence from fitting a PMCMC algorithm — prevalence,SimInf_pmcmc-method","text":"Extract prevalence filtered trajectories particle Markov chain Monte Carlo algorithm.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract prevalence from fitting a PMCMC algorithm — prevalence,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' prevalence(model, formula, level, index, start = 1, end = NULL, thin = 1)"},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract prevalence from fitting a PMCMC algorithm — prevalence,SimInf_pmcmc-method","text":"model SimInf_pmcmc object extract prevalence . formula formula specifies compartments define cases disease specific characteristic (numerator), compartments define entire population interest (denominator). left-hand-side formula defines cases, right-hand-side defines population, example, ~S++R ‘SIR’ model (see ‘Examples’). .  (dot) expanded compartments, example, ~.  expanded ~S++R ‘SIR’ model (see ‘Examples’). formula can also contain condition (indicated |) node time step control population include calculation, example, ~ . | R == 0 calculate prevalence recovered zero ‘SIR’ model. condition must evaluate TRUE FALSE node time step. Please note, denominator zero, prevalence NaN. Additionally, level=3 (within-node prevalence) formula contains condition evaluates FALSE, prevalence also NaN. level level prevalence calculated time point tspan. 1 (population prevalence): calculates proportion individuals (cases) population. 2 (node prevalence): calculates proportion nodes least one case. 3 (within-node prevalence): calculates proportion cases within node. Default 1. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. start start iteration remove burn-iterations. Default start = 1. end last iteration include. Default NULL set end last iteration chain. thin keep every thin iteration start iteration. Default thin = 1, .e., keep every iteration.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence-SimInf_pmcmc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract prevalence from fitting a PMCMC algorithm — prevalence,SimInf_pmcmc-method","text":"data.frame first column     iteration remaining columns result     calling prevalence,SimInf_model-method     arguments formula, level index     iteration.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to calculate prevalence from trajectory data — prevalence","title":"Generic function to calculate prevalence from trajectory data — prevalence","text":"Calculate proportion individuals disease population, proportion nodes least one diseased individual, proportion individuals disease node.","code":""},{"path":"http://stewid.github.io/SimInf/reference/prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to calculate prevalence from trajectory data — prevalence","text":"","code":"prevalence(model, formula, level = 1, index = NULL, ...)"},{"path":"http://stewid.github.io/SimInf/reference/prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to calculate prevalence from trajectory data — prevalence","text":"model model trajectory data calculate prevalence . formula formula specifies compartments define cases disease specific characteristic (numerator), compartments define entire population interest (denominator). left-hand-side formula defines cases, right-hand-side defines population, example, ~S++R ‘SIR’ model (see ‘Examples’). .  (dot) expanded compartments, example, ~.  expanded ~S++R ‘SIR’ model (see ‘Examples’). formula can also contain condition (indicated |) node time step control population include calculation, example, ~ . | R == 0 calculate prevalence recovered zero ‘SIR’ model. condition must evaluate TRUE FALSE node time step. Please note, denominator zero, prevalence NaN. Additionally, level=3 (within-node prevalence) formula contains condition evaluates FALSE, prevalence also NaN. level level prevalence calculated time point tspan. 1 (population prevalence): calculates proportion individuals (cases) population. 2 (node prevalence): calculates proportion nodes least one case. 3 (within-node prevalence): calculates proportion cases within node. Default 1. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. ... Additional arguments, see prevalence,SimInf_model-method","code":""},{"path":"http://stewid.github.io/SimInf/reference/punchcard-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a template for where to record result during a simulation — punchcard<-","title":"Set a template for where to record result during a simulation — punchcard<-","text":"Using sparse result matrix can save lot memory model contains many nodes time-points, data points interest post-processing.","code":""},{"path":"http://stewid.github.io/SimInf/reference/punchcard-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a template for where to record result during a simulation — punchcard<-","text":"","code":"punchcard(model) <- value  # S4 method for class 'SimInf_model' punchcard(model) <- value"},{"path":"http://stewid.github.io/SimInf/reference/punchcard-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a template for where to record result during a simulation — punchcard<-","text":"model model set template record result. value data.frame specify nodes, time-points compartments record number individuals tspan. Use NULL reset model record number inidividuals compartment every node time-point tspan.","code":""},{"path":"http://stewid.github.io/SimInf/reference/punchcard-set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a template for where to record result during a simulation — punchcard<-","text":"Using sparse result matrix can save lot memory model contains many nodes time-points, data points interest post-processing. use feature, template defined data points record. done using data.frame specifies time-points (column ‘time’) nodes (column ‘node’) record state compartments, see ‘Examples’. specified time-points, nodes compartments must exist model, error raised. Note specifying template affects data-points recorded post-processing, affect solver simulates trajectory.","code":""},{"path":"http://stewid.github.io/SimInf/reference/punchcard-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a template for where to record result during a simulation — punchcard<-","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 6 nodes and initialize it to run over 10 days. u0 <- data.frame(S = 100:105, I = 1:6, R = rep(0, 6)) model <- SIR(u0 = u0, tspan = 1:10, beta = 0.16, gamma = 0.077)  ## Run the model. result <- run(model)  ## Display the trajectory with data for every node at each ## time-point in tspan. trajectory(result) #>    node time   S  I R #> 1     1    1 100  1 0 #> 2     2    1 101  2 0 #> 3     3    1 102  3 0 #> 4     4    1 102  5 0 #> 5     5    1 103  6 0 #> 6     6    1 105  6 0 #> 7     1    2 100  1 0 #> 8     2    2 101  2 0 #> 9     3    2 101  4 0 #> 10    4    2 101  5 1 #> 11    5    2 103  6 0 #> 12    6    2 105  6 0 #> 13    1    3  99  2 0 #> 14    2    3 101  2 0 #> 15    3    3 101  4 0 #> 16    4    3  99  6 2 #> 17    5    3 101  8 0 #> 18    6    3 103  7 1 #> 19    1    4  98  3 0 #> 20    2    4 101  2 0 #> 21    3    4 101  4 0 #> 22    4    4  98  6 3 #> 23    5    4  99 10 0 #> 24    6    4 101  8 2 #> 25    1    5  98  3 0 #> 26    2    5 101  2 0 #> 27    3    5 100  5 0 #> 28    4    5  97  6 4 #> 29    5    5  98  9 2 #> 30    6    5 101  6 4 #> 31    1    6  98  2 1 #> 32    2    6 101  2 0 #> 33    3    6 100  5 0 #> 34    4    6  97  5 5 #> 35    5    6  98  8 3 #> 36    6    6 100  7 4 #> 37    1    7  98  2 1 #> 38    2    7  98  5 0 #> 39    3    7 100  5 0 #> 40    4    7  92 10 5 #> 41    5    7  98  7 4 #> 42    6    7  99  8 4 #> 43    1    8  97  3 1 #> 44    2    8  98  5 0 #> 45    3    8  98  6 1 #> 46    4    8  92  8 7 #> 47    5    8  95 10 4 #> 48    6    8  99  8 4 #> 49    1    9  97  3 1 #> 50    2    9  97  6 0 #> 51    3    9  98  4 3 #> 52    4    9  91  9 7 #> 53    5    9  94 10 5 #> 54    6    9  99  7 5 #> 55    1   10  97  3 1 #> 56    2   10  96  6 1 #> 57    3   10  98  4 3 #> 58    4   10  89 11 7 #> 59    5   10  93  9 7 #> 60    6   10  98  8 5  ## Assume we are only interested in nodes '2' and '4' at the ## time-points '3' and '5' df <- data.frame(time = c(3, 5, 3, 5),                  node = c(2, 2, 4, 4),                  S = c(TRUE, TRUE, TRUE, TRUE),                  I = c(TRUE, TRUE, TRUE, TRUE),                  R = c(TRUE, TRUE, TRUE, TRUE)) punchcard(model) <- df result <- run(model) trajectory(result) #>   node time   S I R #> 1    2    3 100 3 0 #> 2    4    3 102 5 0 #> 3    2    5 100 3 0 #> 4    4    5 100 6 1  ## We can also specify to record only some of the compartments in ## each time-step. df <- data.frame(time = c(3, 5, 3, 5),                  node = c(2, 2, 4, 4),                  S = c(FALSE, TRUE, TRUE, TRUE),                  I = c(TRUE, FALSE, TRUE, FALSE),                  R = c(TRUE, FALSE, TRUE, TRUE)) punchcard(model) <- df result <- run(model) trajectory(result) #>   node time  S  I  R #> 1    2    3 NA  4  0 #> 2    4    3 99  7  1 #> 3    2    5 98 NA NA #> 4    4    5 99 NA  3  ## A shortcut to specify to record all of the compartments in ## each time-step is to only inlude node and time. df <- data.frame(time = c(3, 5, 3, 5),                  node = c(2, 2, 4, 4)) punchcard(model) <- df result <- run(model) trajectory(result) #>   node time   S I R #> 1    2    3  97 6 0 #> 2    4    3 103 4 0 #> 3    2    5  96 6 1 #> 4    4    5 101 6 0  ## It is possible to use an empty 'data.frame' to specify ## that no data-points should be recorded for the trajectory. punchcard(model) <- data.frame() result <- run(model) trajectory(result) #> [1] node time S    I    R    #> <0 rows> (or 0-length row.names)  ## Use 'NULL' to reset the model to record data for every node at ## each time-point in tspan. punchcard(model) <- NULL result <- run(model) trajectory(result) #>    node time   S  I R #> 1     1    1 100  1 0 #> 2     2    1 101  2 0 #> 3     3    1  99  6 0 #> 4     4    1 103  4 0 #> 5     5    1 104  5 0 #> 6     6    1 105  6 0 #> 7     1    2 100  1 0 #> 8     2    2 100  3 0 #> 9     3    2  98  7 0 #> 10    4    2 102  4 1 #> 11    5    2 104  5 0 #> 12    6    2 104  7 0 #> 13    1    3 100  1 0 #> 14    2    3 100  2 1 #> 15    3    3  98  7 0 #> 16    4    3 101  5 1 #> 17    5    3 101  8 0 #> 18    6    3 103  6 2 #> 19    1    4 100  1 0 #> 20    2    4 100  2 1 #> 21    3    4  96  9 0 #> 22    4    4  99  7 1 #> 23    5    4 101  6 2 #> 24    6    4 103  5 3 #> 25    1    5 100  1 0 #> 26    2    5 100  2 1 #> 27    3    5  96  7 2 #> 28    4    5  99  6 2 #> 29    5    5  96 11 2 #> 30    6    5 103  5 3 #> 31    1    6 100  1 0 #> 32    2    6  99  3 1 #> 33    3    6  95  8 2 #> 34    4    6  98  7 2 #> 35    5    6  95 11 3 #> 36    6    6 102  5 4 #> 37    1    7 100  1 0 #> 38    2    7  99  3 1 #> 39    3    7  94  9 2 #> 40    4    7  98  7 2 #> 41    5    7  94 12 3 #> 42    6    7 102  4 5 #> 43    1    8 100  1 0 #> 44    2    8  99  3 1 #> 45    3    8  94  8 3 #> 46    4    8  97  7 3 #> 47    5    8  93 13 3 #> 48    6    8 101  5 5 #> 49    1    9 100  1 0 #> 50    2    9  99  3 1 #> 51    3    9  90 11 4 #> 52    4    9  97  7 3 #> 53    5    9  91 13 5 #> 54    6    9 101  5 5 #> 55    1   10 100  1 0 #> 56    2   10  99  3 1 #> 57    3   10  87 14 4 #> 58    4   10  97  5 5 #> 59    5   10  89 14 6 #> 60    6   10  99  7 5"},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the SimInf stochastic simulation algorithm — run","title":"Run the SimInf stochastic simulation algorithm — run","text":"Run SimInf stochastic simulation algorithm","code":""},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the SimInf stochastic simulation algorithm — run","text":"","code":"run(model, ...)  # S4 method for class 'SimInf_model' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SEIR' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SIR' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SIS' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SISe' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SISe3' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SISe3_sp' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SISe_sp' run(model, solver = c(\"ssm\", \"aem\"), ...)  # S4 method for class 'SimInf_abc' run(model, ...)"},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the SimInf stochastic simulation algorithm — run","text":"model SimInf model run. ... Additional arguments. solver numerical solver utilize. Default 'ssm'.","code":""},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the SimInf stochastic simulation algorithm — run","text":"SimInf_model object result     simulation.","code":""},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run the SimInf stochastic simulation algorithm — run","text":"2019 2016 2015","code":""},{"path":"http://stewid.github.io/SimInf/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the SimInf stochastic simulation algorithm — run","text":"","code":"## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 10 nodes and initialise ## it to run over 100 days. model <- SIR(u0 = data.frame(S = rep(99, 10),                              I = rep(1, 10),                              R = rep(0, 10)),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the model and save the result. result <- run(model)  ## Plot the proportion of susceptible, infected and recovered ## individuals. plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/select_matrix-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the select matrix for a SimInf_model object — select_matrix<-","title":"Set the select matrix for a SimInf_model object — select_matrix<-","text":"Utility function set events@E SimInf_model object, see SimInf_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/select_matrix-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the select matrix for a SimInf_model object — select_matrix<-","text":"","code":"select_matrix(model) <- value  # S4 method for class 'SimInf_model' select_matrix(model) <- value"},{"path":"http://stewid.github.io/SimInf/reference/select_matrix-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the select matrix for a SimInf_model object — select_matrix<-","text":"model model set select matrix . value matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/select_matrix-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the select matrix for a SimInf_model object — select_matrix<-","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Set the select matrix select_matrix(model) <- matrix(c(1, 0, 0, 1, 1, 1, 0, 0, 1), nrow = 3)  ## Extract the select matrix from the model select_matrix(model) #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>   1 2 3 #> S 1 1 . #> I . 1 . #> R . 1 1"},{"path":"http://stewid.github.io/SimInf/reference/select_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the select matrix from a SimInf_model object — select_matrix","title":"Extract the select matrix from a SimInf_model object — select_matrix","text":"Utility function extract events@E SimInf_model object, see SimInf_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/select_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the select matrix from a SimInf_model object — select_matrix","text":"","code":"select_matrix(model)  # S4 method for class 'SimInf_model' select_matrix(model)"},{"path":"http://stewid.github.io/SimInf/reference/select_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the select matrix from a SimInf_model object — select_matrix","text":"model model extract select matrix E .","code":""},{"path":"http://stewid.github.io/SimInf/reference/select_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the select matrix from a SimInf_model object — select_matrix","text":"dgCMatrix object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/select_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the select matrix from a SimInf_model object — select_matrix","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Extract the select matrix from the model select_matrix(model) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>   1 2 3 4 #> S 1 . . 1 #> I . 1 . 1 #> R . . 1 1"},{"path":"http://stewid.github.io/SimInf/reference/set_num_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the number of threads that SimInf should use — set_num_threads","title":"Specify the number of threads that SimInf should use — set_num_threads","text":"Set number threads used SimInf code parallelized OpenMP (available). number threads initialized SimInf first loaded R session using optional envioronment variables (see ‘Details’). also possible specify number threads calling set_num_threads. environment variables affect number threads change, set_num_threads must called take effect.","code":""},{"path":"http://stewid.github.io/SimInf/reference/set_num_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the number of threads that SimInf should use — set_num_threads","text":"","code":"set_num_threads(threads = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/set_num_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the number of threads that SimInf should use — set_num_threads","text":"threads integer maximum number threads use functions parallelized OpenMP (available). Default NULL, .e. use available processors check limits environment varibles (see ‘Details’).","code":""},{"path":"http://stewid.github.io/SimInf/reference/set_num_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the number of threads that SimInf should use — set_num_threads","text":"previous value returned (invisible).","code":""},{"path":"http://stewid.github.io/SimInf/reference/set_num_threads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify the number of threads that SimInf should use — set_num_threads","text":"omp_get_num_procs() function used determine number processors available device time routine called. number threads limited omp_get_thread_limit() current values environmental variables (set) Sys.getenv(\"OMP_THREAD_LIMIT\") Sys.getenv(\"OMP_NUM_THREADS\") Sys.getenv(\"SIMINF_NUM_THREADS\") Additionally, maximum number threads can controlled threads argument, given value limits described .","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the shift matrix for a SimInf_model object — shift_matrix<-","title":"Set the shift matrix for a SimInf_model object — shift_matrix<-","text":"Utility function set events@N SimInf_model object, see SimInf_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the shift matrix for a SimInf_model object — shift_matrix<-","text":"","code":"shift_matrix(model) <- value  # S4 method for class 'SimInf_model' shift_matrix(model) <- value"},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the shift matrix for a SimInf_model object — shift_matrix<-","text":"model model set shift matrix events@N. value matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the shift matrix for a SimInf_model object — shift_matrix<-","text":"SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the shift matrix for a SimInf_model object — shift_matrix<-","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Set the shift matrix shift_matrix(model) <- matrix(c(2, 1, 0), nrow = 3)  ## Extract the shift matrix from the model shift_matrix(model) #>   1 #> S 2 #> I 1 #> R 0"},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the shift matrix from a SimInf_model object — shift_matrix","title":"Extract the shift matrix from a SimInf_model object — shift_matrix","text":"Utility function extract shift matrix events@N SimInf_model object, see SimInf_events","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the shift matrix from a SimInf_model object — shift_matrix","text":"","code":"shift_matrix(model)  # S4 method for class 'SimInf_model' shift_matrix(model)"},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the shift matrix from a SimInf_model object — shift_matrix","text":"model model extract shift matrix events@N .","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the shift matrix from a SimInf_model object — shift_matrix","text":"mtrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/shift_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the shift matrix from a SimInf_model object — shift_matrix","text":"","code":"## Create an SIR model model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:5, beta = 0.16, gamma = 0.077)  ## Extract the shift matrix from the model shift_matrix(model) #> <0 x 0 matrix>"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_abc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of a SimInf_abc object — show,SimInf_abc-method","title":"Print summary of a SimInf_abc object — show,SimInf_abc-method","text":"Print summary SimInf_abc object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_abc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of a SimInf_abc object — show,SimInf_abc-method","text":"","code":"# S4 method for class 'SimInf_abc' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_abc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of a SimInf_abc object — show,SimInf_abc-method","text":"object SimInf_abc object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_abc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of a SimInf_abc object — show,SimInf_abc-method","text":"invisible(object).","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Brief summary of SimInf_events — show,SimInf_events-method","title":"Brief summary of SimInf_events — show,SimInf_events-method","text":"Shows number scheduled events.","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brief summary of SimInf_events — show,SimInf_events-method","text":"","code":"# S4 method for class 'SimInf_events' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brief summary of SimInf_events — show,SimInf_events-method","text":"object SimInf_events object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_events-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brief summary of SimInf_events — show,SimInf_events-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_indiv_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of a SimInf_indiv_events object — show,SimInf_indiv_events-method","title":"Print summary of a SimInf_indiv_events object — show,SimInf_indiv_events-method","text":"Print summary SimInf_indiv_events object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_indiv_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of a SimInf_indiv_events object — show,SimInf_indiv_events-method","text":"","code":"# S4 method for class 'SimInf_indiv_events' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_indiv_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of a SimInf_indiv_events object — show,SimInf_indiv_events-method","text":"object SimInf_indiv_events object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_indiv_events-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of a SimInf_indiv_events object — show,SimInf_indiv_events-method","text":"invisible(object).","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Brief summary of SimInf_model — show,SimInf_model-method","title":"Brief summary of SimInf_model — show,SimInf_model-method","text":"Brief summary SimInf_model","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brief summary of SimInf_model — show,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brief summary of SimInf_model — show,SimInf_model-method","text":"object SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_model-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brief summary of SimInf_model — show,SimInf_model-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brief summary of SimInf_model — show,SimInf_model-method","text":"","code":"## Create an 'SIR' model with 10 nodes and initialise ## it to run over 100 days. model <- SIR(u0 = data.frame(S = rep(99, 10),                              I = rep(1, 10),                              R = rep(0, 10)),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Brief summary of the model model #> Model: SIR #> Number of nodes: 10 #> Number of transitions: 2 #> Number of scheduled events: 0 #>  #> Local data #> ---------- #>  Parameter Value #>  beta      0.160 #>  gamma     0.077 #>  #> Compartments #> ------------ #>  - Empty, please run the model first  ## Run the model and save the result result <- run(model)  ## Brief summary of the result. Note that 'U' and 'V' are ## non-empty after running the model. result #> Model: SIR #> Number of nodes: 10 #> Number of transitions: 2 #> Number of scheduled events: 0 #>  #> Local data #> ---------- #>  Parameter Value #>  beta      0.160 #>  gamma     0.077 #>  #> Compartments #> ------------ #>     Min. 1st Qu. Median  Mean 3rd Qu.  Max. #>  S 18.00   68.00  99.00 81.09   99.00 99.00 #>  I  0.00    0.00   0.00  3.97    6.00 26.00 #>  R  0.00    1.00   1.00 14.94   18.00 78.00"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Brief summary of a SimInf_pfilter object — show,SimInf_pfilter-method","title":"Brief summary of a SimInf_pfilter object — show,SimInf_pfilter-method","text":"Brief summary SimInf_pfilter object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brief summary of a SimInf_pfilter object — show,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brief summary of a SimInf_pfilter object — show,SimInf_pfilter-method","text":"object SimInf_pfilter object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pfilter-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brief summary of a SimInf_pfilter object — show,SimInf_pfilter-method","text":"invisible(object).","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Brief summary of a SimInf_pmcmc object — show,SimInf_pmcmc-method","title":"Brief summary of a SimInf_pmcmc object — show,SimInf_pmcmc-method","text":"Brief summary SimInf_pmcmc object","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brief summary of a SimInf_pmcmc object — show,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' show(object)"},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brief summary of a SimInf_pmcmc object — show,SimInf_pmcmc-method","text":"object SimInf_pmcmc object.","code":""},{"path":"http://stewid.github.io/SimInf/reference/show-SimInf_pmcmc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brief summary of a SimInf_pmcmc object — show,SimInf_pmcmc-method","text":"invisible(object).","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_abc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_abc object — summary,SimInf_abc-method","title":"Detailed summary of a SimInf_abc object — summary,SimInf_abc-method","text":"Detailed summary SimInf_abc object","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_abc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_abc object — summary,SimInf_abc-method","text":"","code":"# S4 method for class 'SimInf_abc' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_abc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_abc object — summary,SimInf_abc-method","text":"object SimInf_abc object ... Additional arguments affecting summary produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_abc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_abc object — summary,SimInf_abc-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_events object — summary,SimInf_events-method","title":"Detailed summary of a SimInf_events object — summary,SimInf_events-method","text":"Shows number scheduled events number scheduled events per event type.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_events object — summary,SimInf_events-method","text":"","code":"# S4 method for class 'SimInf_events' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_events object — summary,SimInf_events-method","text":"object SimInf_events object ... Additional arguments affecting summary produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_events-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_events object — summary,SimInf_events-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_indiv_events-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_indiv_events object — summary,SimInf_indiv_events-method","title":"Detailed summary of a SimInf_indiv_events object — summary,SimInf_indiv_events-method","text":"Detailed summary SimInf_indiv_events object","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_indiv_events-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_indiv_events object — summary,SimInf_indiv_events-method","text":"","code":"# S4 method for class 'SimInf_indiv_events' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_indiv_events-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_indiv_events object — summary,SimInf_indiv_events-method","text":"object SimInf_indiv_events object ... Additional arguments affecting summary produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_indiv_events-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_indiv_events object — summary,SimInf_indiv_events-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_model object — summary,SimInf_model-method","title":"Detailed summary of a SimInf_model object — summary,SimInf_model-method","text":"Detailed summary SimInf_model object","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_model object — summary,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_model object — summary,SimInf_model-method","text":"object SimInf_model object ... Additional arguments affecting summary produced.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_model-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_model object — summary,SimInf_model-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_pfilter object — summary,SimInf_pfilter-method","title":"Detailed summary of a SimInf_pfilter object — summary,SimInf_pfilter-method","text":"Detailed summary SimInf_pfilter object","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_pfilter object — summary,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_pfilter object — summary,SimInf_pfilter-method","text":"object SimInf_pfilter object. ... Unused additional arguments.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pfilter-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_pfilter object — summary,SimInf_pfilter-method","text":"invisible(NULL).","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed summary of a SimInf_pmcmc object — summary,SimInf_pmcmc-method","title":"Detailed summary of a SimInf_pmcmc object — summary,SimInf_pmcmc-method","text":"Detailed summary SimInf_pmcmc object","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed summary of a SimInf_pmcmc object — summary,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' summary(object, ...)"},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detailed summary of a SimInf_pmcmc object — summary,SimInf_pmcmc-method","text":"object SimInf_pmcmc object ... used.","code":""},{"path":"http://stewid.github.io/SimInf/reference/summary-SimInf_pmcmc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detailed summary of a SimInf_pmcmc object — summary,SimInf_pmcmc-method","text":"None (invisible 'NULL').","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"Extract number individuals compartment every node generating single stochastic trajectory run.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"","code":"# S4 method for class 'SimInf_model' trajectory(model, compartments, index, format = c(\"data.frame\", \"matrix\"))"},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"model SimInf_model object extract result . compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) extract number individuals compartment .e. data discrete state compartments model. models also continuous state variables e.g. SISe model, also included. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. format default (format = \"data.frame\") generate data.frame one row per node time-step number individuals compartment. Using format = \"matrix\" returns result matrix, internal format (see ‘Details’).","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"data.frame format = \"data.frame\", else     matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"internal-format-of-the-discrete-state-variables","dir":"Reference","previous_headings":"","what":"Internal format of the discrete state variables","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"Description layout internal matrix (U)     returned format = \"matrix\". U[, j]     contains number individuals compartment     tspan[j]. U[1:Nc, j] contains number     individuals node 1 tspan[j]. U[(Nc + 1):(2     * Nc), j] contains number individuals node 2     tspan[j] etc, Nc number     compartments model. dimension matrix     \\(N_n N_c \\times\\) length(tspan) \\(N_n\\)     number nodes.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"internal-format-of-the-continuous-state-variables","dir":"Reference","previous_headings":"","what":"Internal format of the continuous state variables","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"Description layout matrix returned     format = \"matrix\". result matrix     real-valued continuous state. V[, j] contains     real-valued state system tspan[j].     dimension matrix \\(N_n\\)dim(ldata)[1]     \\(\\times\\) length(tspan).","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data from a simulated trajectory — trajectory,SimInf_model-method","text":"","code":"## Create an 'SIR' model with 6 nodes and initialize ## it to run over 10 days. u0 <- data.frame(S = 100:105, I = 1:6, R = rep(0, 6)) model <- SIR(u0 = u0, tspan = 1:10, beta = 0.16, gamma = 0.077)  ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Extract the number of individuals in each compartment at the ## time-points in 'tspan'. trajectory(result) #>    node time   S  I R #> 1     1    1 100  1 0 #> 2     2    1 100  3 0 #> 3     3    1 102  3 0 #> 4     4    1 102  5 0 #> 5     5    1 102  7 0 #> 6     6    1 103  8 0 #> 7     1    2 100  1 0 #> 8     2    2 100  3 0 #> 9     3    2 102  3 0 #> 10    4    2 101  5 1 #> 11    5    2 100  8 1 #> 12    6    2 103  8 0 #> 13    1    3 100  1 0 #> 14    2    3  99  4 0 #> 15    3    3 102  2 1 #> 16    4    3  99  7 1 #> 17    5    3 100  7 2 #> 18    6    3 101 10 0 #> 19    1    4 100  1 0 #> 20    2    4  98  5 0 #> 21    3    4 102  1 2 #> 22    4    4  99  5 3 #> 23    5    4 100  5 4 #> 24    6    4 100  9 2 #> 25    1    5 100  1 0 #> 26    2    5  98  4 1 #> 27    3    5 102  0 3 #> 28    4    5  99  5 3 #> 29    5    5  99  6 4 #> 30    6    5 100  8 3 #> 31    1    6 100  1 0 #> 32    2    6  97  5 1 #> 33    3    6 102  0 3 #> 34    4    6  99  5 3 #> 35    5    6  99  6 4 #> 36    6    6  99  9 3 #> 37    1    7 100  1 0 #> 38    2    7  97  5 1 #> 39    3    7 102  0 3 #> 40    4    7  95  8 4 #> 41    5    7  99  6 4 #> 42    6    7  96 12 3 #> 43    1    8 100  1 0 #> 44    2    8  96  5 2 #> 45    3    8 102  0 3 #> 46    4    8  95  8 4 #> 47    5    8  98  7 4 #> 48    6    8  95 11 5 #> 49    1    9 100  1 0 #> 50    2    9  95  6 2 #> 51    3    9 102  0 3 #> 52    4    9  94  7 6 #> 53    5    9  97  8 4 #> 54    6    9  91 15 5 #> 55    1   10 100  1 0 #> 56    2   10  94  7 2 #> 57    3   10 102  0 3 #> 58    4   10  94  6 7 #> 59    5   10  95 10 4 #> 60    6   10  88 18 5  ## Extract the number of recovered individuals in the first node ## at the time-points in 'tspan'. trajectory(result, compartments = \"R\", index = 1) #>    node time R #> 1     1    1 0 #> 2     1    2 0 #> 3     1    3 0 #> 4     1    4 0 #> 5     1    5 0 #> 6     1    6 0 #> 7     1    7 0 #> 8     1    8 0 #> 9     1    9 0 #> 10    1   10 0  ## Extract the number of recovered individuals in the first and ## third node at the time-points in 'tspan'. trajectory(result, compartments = \"R\", index = c(1, 3)) #>    node time R #> 1     1    1 0 #> 2     3    1 0 #> 3     1    2 0 #> 4     3    2 0 #> 5     1    3 0 #> 6     3    3 1 #> 7     1    4 0 #> 8     3    4 2 #> 9     1    5 0 #> 10    3    5 3 #> 11    1    6 0 #> 12    3    6 3 #> 13    1    7 0 #> 14    3    7 3 #> 15    1    8 0 #> 16    3    8 3 #> 17    1    9 0 #> 18    3    9 3 #> 19    1   10 0 #> 20    3   10 3  ## Create an 'SISe' model with 6 nodes and initialize ## it to run over 10 days. u0 <- data.frame(S = 100:105, I = 1:6) model <- SISe(u0 = u0, tspan = 1:10, phi = rep(0, 6),     upsilon = 0.02, gamma = 0.1, alpha = 1, epsilon = 1.1e-5,     beta_t1 = 0.15, beta_t2 = 0.15, beta_t3 = 0.15, beta_t4 = 0.15,     end_t1 = 91, end_t2 = 182, end_t3 = 273, end_t4 = 365)  ## Run the model result <- run(model)  ## Extract the continuous state variable 'phi' which represents ## the environmental infectious pressure. trajectory(result, \"phi\") #>    node time         phi #> 1     1    1 0.009911990 #> 2     2    1 0.009719738 #> 3     3    1 0.028582429 #> 4     4    1 0.028048383 #> 5     5    1 0.036708248 #> 6     6    1 0.054065054 #> 7     1    2 0.008436192 #> 8     2    2 0.017981515 #> 9     3    2 0.052877493 #> 10    4    2 0.051889509 #> 11    5    2 0.067910258 #> 12    6    2 0.100020350 #> 13    1    3 0.007181763 #> 14    2    3 0.025004026 #> 15    3    3 0.064004488 #> 16    4    3 0.062808671 #> 17    5    3 0.094431967 #> 18    6    3 0.130073343 #> 19    1    4 0.006115498 #> 20    2    4 0.030973160 #> 21    3    4 0.073462434 #> 22    4    4 0.072089959 #> 23    5    4 0.116975420 #> 24    6    4 0.155618386 #> 25    1    5 0.005209174 #> 26    2    5 0.036046924 #> 27    3    5 0.081501688 #> 28    4    5 0.089324849 #> 29    5    5 0.126963043 #> 30    6    5 0.177331673 #> 31    1    6 0.004438798 #> 32    2    6 0.040359623 #> 33    3    6 0.088335054 #> 34    4    6 0.094628710 #> 35    5    6 0.144626834 #> 36    6    6 0.195787967 #> 37    1    7 0.003783978 #> 38    2    7 0.044025417 #> 39    3    7 0.094143415 #> 40    4    7 0.108482787 #> 41    5    7 0.159641057 #> 42    6    7 0.220484826 #> 43    1    8 0.003227381 #> 44    2    8 0.047141343 #> 45    3    8 0.099080522 #> 46    4    8 0.120258752 #> 47    5    8 0.172403146 #> 48    6    8 0.241477156 #> 49    1    9 0.002754274 #> 50    2    9 0.049789879 #> 51    3    9 0.103277062 #> 52    4    9 0.130268322 #> 53    5    9 0.174076610 #> 54    6    9 0.277338655 #> 55    1   10 0.002352133 #> 56    2   10 0.052041135 #> 57    3   10 0.106844122 #> 58    4   10 0.138776457 #> 59    5   10 0.184673366 #> 60    6   10 0.298811920"},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pfilter-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract filtered trajectory from running a particle filter — trajectory,SimInf_pfilter-method","title":"Extract filtered trajectory from running a particle filter — trajectory,SimInf_pfilter-method","text":"Extract filtered trajectory running particle filter","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pfilter-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract filtered trajectory from running a particle filter — trajectory,SimInf_pfilter-method","text":"","code":"# S4 method for class 'SimInf_pfilter' trajectory(model, compartments, index, format = c(\"data.frame\", \"matrix\"))"},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pfilter-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract filtered trajectory from running a particle filter — trajectory,SimInf_pfilter-method","text":"model SimInf_pfilter object extract result . compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) extract number individuals compartment .e. data discrete state compartments model. models also continuous state variables e.g. SISe model, also included. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. format default (format = \"data.frame\") generate data.frame one row per node time-step number individuals compartment. Using format = \"matrix\" returns result matrix, internal format (see ‘Details’ trajectory,SimInf_model-method).","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pfilter-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract filtered trajectory from running a particle filter — trajectory,SimInf_pfilter-method","text":"data.frame format = \"data.frame\", else     matrix.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pmcmc-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract filtered trajectories from fitting a PMCMC algorithm — trajectory,SimInf_pmcmc-method","title":"Extract filtered trajectories from fitting a PMCMC algorithm — trajectory,SimInf_pmcmc-method","text":"Extract filtered trajectories particle Markov chain Monte Carlo algorithm.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pmcmc-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract filtered trajectories from fitting a PMCMC algorithm — trajectory,SimInf_pmcmc-method","text":"","code":"# S4 method for class 'SimInf_pmcmc' trajectory(model, compartments, index, start = 1, end = NULL, thin = 1)"},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pmcmc-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract filtered trajectories from fitting a PMCMC algorithm — trajectory,SimInf_pmcmc-method","text":"model SimInf_pmcmc object extract filtered trajectories . compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) extract number individuals compartment .e. data discrete state compartments model. models also continuous state variables e.g. SISe model, also included. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. start start iteration remove burn-iterations. Default start = 1. end last iteration include. Default NULL set end last iteration chain. thin keep every thin iteration start iteration. Default thin = 1, .e., keep every iteration.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory-SimInf_pmcmc-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract filtered trajectories from fitting a PMCMC algorithm — trajectory,SimInf_pmcmc-method","text":"data.frame first column     iteration remaining columns result     calling trajectory,SimInf_model-method     arguments compartments index     iteration.","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to extract data from a simulated trajectory — trajectory","title":"Generic function to extract data from a simulated trajectory — trajectory","text":"Generic function extract data simulated trajectory","code":""},{"path":"http://stewid.github.io/SimInf/reference/trajectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to extract data from a simulated trajectory — trajectory","text":"","code":"trajectory(model, compartments = NULL, index = NULL, ...)"},{"path":"http://stewid.github.io/SimInf/reference/trajectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to extract data from a simulated trajectory — trajectory","text":"model object extract trajectory . compartments specify names compartments extract data . compartments can specified character vector e.g. compartments = c('S', '', 'R'), formula e.g. compartments = ~S++R (see ‘Examples’). Default (compartments=NULL) extract number individuals compartment .e. data discrete state compartments model. models also continuous state variables e.g. SISe model, also included. index indices specifying subset nodes include extracting data. Default (index = NULL) extract data nodes. ... Additional arguments, see trajectory,SimInf_model-method","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the initial compartment state u0 in each node — u0<-","title":"Update the initial compartment state u0 in each node — u0<-","text":"Update initial compartment state u0 node","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the initial compartment state u0 in each node — u0<-","text":"","code":"u0(model) <- value  # S4 method for class 'SimInf_model' u0(model) <- value"},{"path":"http://stewid.github.io/SimInf/reference/u0-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the initial compartment state u0 in each node — u0<-","text":"model model update initial compartment state u0. value data.frame initial state node. row one node, number rows u0 must match number nodes model. columns u0 name matches compartment model used.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the initial compartment state u0 in each node — u0<-","text":"","code":"## Create an SIR model object. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Run the SIR model and plot the result. set.seed(22) result <- run(model) plot(result)   ## Update u0 and run the model again u0(model) <- data.frame(S = 990, I = 10, R = 0) result <- run(model) plot(result)"},{"path":"http://stewid.github.io/SimInf/reference/u0.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the initial compartment state — u0","title":"Get the initial compartment state — u0","text":"Get initial compartment state","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the initial compartment state — u0","text":"","code":"u0(object, ...)  # S4 method for class 'SimInf_model' u0(object, ...)  # S4 method for class 'SimInf_indiv_events' u0(object, time = NULL, target = NULL, age = NULL)"},{"path":"http://stewid.github.io/SimInf/reference/u0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the initial compartment state — u0","text":"object object get initial compartment state u0 . ... Additional arguments. time used object class SimInf_indiv_events object. time-point used create u0. left empty (default), earliest time among events used. target used object class SimInf_indiv_events object. SimInf model ('SEIR', 'SIR', 'SIS', 'SISe3', 'SISe3_sp', 'SISe', 'SISe_sp') target events u0 . default, NULL, creates u0, compartments might renamed post-processed fit specific use case. age used object class SimInf_indiv_events object. integer vector break points days ageing events. default, NULL, creates u0 individuals belong age category.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the initial compartment state — u0","text":"data.frame initial compartment state.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the initial compartment state — u0","text":"","code":"## Create an SIR model object. model <- SIR(u0 = data.frame(S = 99, I = 1, R = 0),              tspan = 1:100,              beta = 0.16,              gamma = 0.077)  ## Get the initial compartment state. u0(model) #>    S I R #> 1 99 1 0"},{"path":"http://stewid.github.io/SimInf/reference/u0_SEIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize the ‘SEIR’ model — u0_SEIR","title":"Example data to initialize the ‘SEIR’ model — u0_SEIR","text":"Example data initialize population 1600 nodes demonstrate SEIR model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SEIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize the ‘SEIR’ model — u0_SEIR","text":"","code":"u0_SEIR()"},{"path":"http://stewid.github.io/SimInf/reference/u0_SEIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize the ‘SEIR’ model — u0_SEIR","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SEIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize the ‘SEIR’ model — u0_SEIR","text":"data.frame number individuals ‘S’, ‘E’, ‘’ ‘R’ compartments 1600 nodes. Note ‘E’, ‘’ ‘R’ compartments zero.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SEIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize the ‘SEIR’ model — u0_SEIR","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SEIR' model with 1600 nodes and initialize it to ## run over 4*365 days and record data at weekly time-points. ## Add ten infected individuals to the first node. u0 <- u0_SEIR() u0$I[1] <- 10 tspan <- seq(from = 1, to = 4*365, by = 7) model <- SEIR(u0      = u0,               tspan   = tspan,               events  = events_SEIR(),               beta    = 0.16,               epsilon = 0.25,               gamma   = 0.01)  ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)  ## Summarize trajectory summary(result) } # }"},{"path":"http://stewid.github.io/SimInf/reference/u0_SIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize the ‘SIR’ model — u0_SIR","title":"Example data to initialize the ‘SIR’ model — u0_SIR","text":"Example data initialize population 1600 nodes demonstrate SIR model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize the ‘SIR’ model — u0_SIR","text":"","code":"u0_SIR()"},{"path":"http://stewid.github.io/SimInf/reference/u0_SIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize the ‘SIR’ model — u0_SIR","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize the ‘SIR’ model — u0_SIR","text":"data.frame number individuals ‘S’, ‘’ ‘R’ compartments 1600 nodes. Note ‘’ ‘R’ compartments zero.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize the ‘SIR’ model — u0_SIR","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIR' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SIR() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SIR(u0     = u0,              tspan  = tspan,              events = events_SIR(),              beta   = 0.16,              gamma  = 0.01)  ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)  ## Summarize trajectory summary(result) } # }"},{"path":"http://stewid.github.io/SimInf/reference/u0_SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize the ‘SIS’ model — u0_SIS","title":"Example data to initialize the ‘SIS’ model — u0_SIS","text":"Example data initialize population 1600 nodes demonstrate SIS model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize the ‘SIS’ model — u0_SIS","text":"","code":"u0_SIS()"},{"path":"http://stewid.github.io/SimInf/reference/u0_SIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize the ‘SIS’ model — u0_SIS","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize the ‘SIS’ model — u0_SIS","text":"data.frame number individuals ‘S’, ‘’ compartments 1600 nodes. Note ‘’ compartment zero.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize the ‘SIS’ model — u0_SIS","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SIS' model with 1600 nodes and initialize ## it to run over 4*365 days. Add one infected individual ## to the first node. u0 <- u0_SIS() u0$I[1] <- 1 tspan <- seq(from = 1, to = 4*365, by = 1) model <- SIS(u0     = u0,              tspan  = tspan,              events = events_SIS(),              beta   = 0.16,              gamma  = 0.01)  ## Run the model to generate a single stochastic trajectory. result <- run(model) plot(result)  ## Summarize trajectory summary(result) } # }"},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize the ‘SISe’ model — u0_SISe","title":"Example data to initialize the ‘SISe’ model — u0_SISe","text":"Example data initialize population 1600 nodes demonstrate SISe model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize the ‘SISe’ model — u0_SISe","text":"","code":"u0_SISe()"},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example data to initialize the ‘SISe’ model — u0_SISe","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize the ‘SISe’ model — u0_SISe","text":"data.frame number individuals ‘S’ ‘’ compartments 1600 nodes. Note ‘’ compartment zero.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize the ‘SISe’ model — u0_SISe","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SISe' model with 1600 nodes and initialize it to ## run over 4*365 days and record data at weekly time-points.  ## Load the initial population and add ten infected individuals to ## the first node. u0 <- u0_SISe() u0$I[1] <- 10  ## Define 'tspan' to run the simulation over 4*365 and record the ## state of the system at weekly time-points. tspan <- seq(from = 1, to = 4*365, by = 7)  ## Load scheduled events for the population of nodes with births, ## deaths and between-node movements of individuals. events <- events_SISe()  ## Create an 'SISe' model model <- SISe(u0 = u0, tspan = tspan, events = events_SISe(),               phi = 0, upsilon = 1.8e-2, gamma = 0.1, alpha = 1,               beta_t1 = 1.0e-1, beta_t2 = 1.0e-1, beta_t3 = 1.25e-1,               beta_t4 = 1.25e-1, end_t1 = 91, end_t2 = 182,               end_t3 = 273, end_t4 = 365, epsilon = 0)  ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Summarize trajectory summary(result)  ## Plot the proportion of nodes with at least one infected ## individual. plot(result, I~S+I, level = 2, type = \"l\") } # }"},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe3.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data to initialize the ‘SISe3’ model — u0_SISe3","title":"Example data to initialize the ‘SISe3’ model — u0_SISe3","text":"Example data initialize population 1600 nodes demonstrate SISe3 model.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data to initialize the ‘SISe3’ model — u0_SISe3","text":"","code":"data(u0_SISe3)"},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data to initialize the ‘SISe3’ model — u0_SISe3","text":"data.frame","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data to initialize the ‘SISe3’ model — u0_SISe3","text":"data.frame number individuals ‘S_1’, ‘S_2’, ‘S_3’, ‘I_1’, ‘I_2’ ‘I_3’ compartments 1600 nodes. Note ‘I_1’, ‘I_2’ ‘I_3’ compartments zero.","code":""},{"path":"http://stewid.github.io/SimInf/reference/u0_SISe3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data to initialize the ‘SISe3’ model — u0_SISe3","text":"","code":"if (FALSE) { # \\dontrun{ ## For reproducibility, call the set.seed() function and specify ## the number of threads to use. To use all available threads, ## remove the set_num_threads() call. set.seed(123) set_num_threads(1)  ## Create an 'SISe3' model with 1600 nodes and initialize it to ## run over 4*365 days and record data at weekly time-points.  ## Load the initial population and add ten infected individuals to ## I_1 in the first node. u0 <- u0_SISe3 u0$I_1[1] <- 10  ## Define 'tspan' to run the simulation over 4*365 and record the ## state of the system at weekly time-points. tspan <- seq(from = 1, to = 4*365, by = 7)  ## Load scheduled events for the population of nodes with births, ## deaths and between-node movements of individuals. events <- events_SISe3  ## Create a 'SISe3' model model <- SISe3(u0 = u0, tspan = tspan, events = events,                phi = rep(0, nrow(u0)), upsilon_1 = 1.8e-2,                upsilon_2 = 1.8e-2, upsilon_3 = 1.8e-2,                gamma_1 = 0.1, gamma_2 = 0.1, gamma_3 = 0.1,                alpha = 1, beta_t1 = 1.0e-1, beta_t2 = 1.0e-1,                beta_t3 = 1.25e-1, beta_t4 = 1.25e-1, end_t1 = 91,                end_t2 = 182, end_t3 = 273, end_t4 = 365, epsilon = 0)  ## Run the model to generate a single stochastic trajectory. result <- run(model)  ## Summarize trajectory summary(result)  ## Plot the proportion of nodes with at least one infected ## individual. plot(result, I_1 + I_2 + I_3 ~ ., level = 2, type = \"l\") } # }"},{"path":"http://stewid.github.io/SimInf/reference/v0-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the initial continuous state v0 in each node — v0<-","title":"Update the initial continuous state v0 in each node — v0<-","text":"Update initial continuous state v0 node","code":""},{"path":"http://stewid.github.io/SimInf/reference/v0-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the initial continuous state v0 in each node — v0<-","text":"","code":"v0(model) <- value  # S4 method for class 'SimInf_model' v0(model) <- value"},{"path":"http://stewid.github.io/SimInf/reference/v0-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the initial continuous state v0 in each node — v0<-","text":"model model update initial continuous state v0. value initial continuous state node. Must data.frame object can coerced data.frame. named numeric vector coerced one-row data.frame. row one node, number rows v0 must match number nodes model. columns v0 name matches continuous state v0 model used","code":""},{"path":"http://stewid.github.io/SimInf/reference/v0-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the initial continuous state v0 in each node — v0<-","text":"","code":"## Create an 'SISe' model with no infected individuals and no ## infectious pressure (phi = 0, epsilon = 0). model <- SISe(u0 = data.frame(S = 100, I = 0), tspan = 1:100,               phi = 0, upsilon = 0.02, gamma = 0.1, alpha = 1,               epsilon = 0, beta_t1 = 0.15, beta_t2 = 0.15,               beta_t3 = 0.15, beta_t4 = 0.15, end_t1 = 91,               end_t2 = 182, end_t3 = 273, end_t4 = 365)  ## Run the 'SISe' model and plot the result. set.seed(22) result <- run(model) plot(result)   ## Update the infectious pressure 'phi' in 'v0' and run ## the model again. v0(model) <- data.frame(phi = 1) result <- run(model) plot(result)"},{"path":[]},{"path":[]},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-981-2024-06-21","dir":"Changelog","previous_headings":"","what":"SimInf 9.8.1 (2024-06-21)","title":"SimInf 9.8.1 (2024-06-21)","text":"CRAN release: 2024-06-21","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-8-1","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.8.1 (2024-06-21)","text":"Added package anchors documentation Rd  targets package base packages.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-9-8-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 9.8.1 (2024-06-21)","text":"Fix model parser (mparse) resolve dependencies variables transitions multiple variables zero dependencies.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-970-2024-04-23","dir":"Changelog","previous_headings":"","what":"SimInf 9.7.0 (2024-04-23)","title":"SimInf 9.7.0 (2024-04-23)","text":"CRAN release: 2024-04-23","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-7-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.7.0 (2024-04-23)","text":"Two new features added model parser. First, now possible define variables transitions, can used calculations propensities calculations variables. Secondly, enumeration constants can now generated indices parameter u, v, ldata, gdata vectors generated C code. See mparse() documentation. Added utility function node_events() facilitate cleaning raw individual event data prepare usage SimInf. Added new vignette post-process data simulated trajectory. Added new section varying probability picking individuals scheduled events vignette. Added missing PROTECT C function SimInf_distance_matrix. uncovered rchk CRAN.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-960-2023-12-20","dir":"Changelog","previous_headings":"","what":"SimInf 9.6.0 (2023-12-20)","title":"SimInf 9.6.0 (2023-12-20)","text":"CRAN release: 2023-12-20","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-6-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.6.0 (2023-12-20)","text":"Fixed CRAN check warnings print format specifiers. Added utility function ‘individual_events’ facilitate cleaning raw individual event data prepare usage SimInf.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-950-2023-01-23","dir":"Changelog","previous_headings":"","what":"SimInf 9.5.0 (2023-01-23)","title":"SimInf 9.5.0 (2023-01-23)","text":"CRAN release: 2023-01-23","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-5-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.5.0 (2023-01-23)","text":"Fixed configuration script use R find compiler use.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-940-2023-01-06","dir":"Changelog","previous_headings":"","what":"SimInf 9.4.0 (2023-01-06)","title":"SimInf 9.4.0 (2023-01-06)","text":"CRAN release: 2023-01-06","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-4-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.4.0 (2023-01-06)","text":"Fix ‘package_skeleton’ function generate internal C code valid C entry names package name contains ‘.’, example, package named ‘pkg.name’. Changed usage ‘(.na(x))’ ‘anyNA(x)’ R code. Internal refactoring ‘distance_matrix’ function reduce memory usage. Ensure check valid model object updating model data. Moved enumeration event types header file ‘inst/SimInf.h’ Fixed problems identified static analysis C code using cppcheck scan-build tools. Added getter function ‘u0’ get initial compartment state model.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-931-2022-10-07","dir":"Changelog","previous_headings":"","what":"SimInf 9.3.1 (2022-10-07)","title":"SimInf 9.3.1 (2022-10-07)","text":"CRAN release: 2022-10-07","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-3-1","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.3.1 (2022-10-07)","text":"Cast return value R_GetCCallable(“SimInf”, “SimInf_run”); correct function pointer type. Fix strict-prototype warnings.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-920-2022-09-03","dir":"Changelog","previous_headings":"","what":"SimInf 9.2.0 (2022-09-03)","title":"SimInf 9.2.0 (2022-09-03)","text":"CRAN release: 2022-09-03","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-2-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.2.0 (2022-09-03)","text":"Renamed set/get funtions update_u0 update_v0 u0and v0, respectively. internal refactoring C code set number threads using OpenMP. Changed coerce sparse matrix via virtual classes order work upcoming Matrix package update.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-910-2022-06-08","dir":"Changelog","previous_headings":"","what":"SimInf 9.1.0 (2022-06-08)","title":"SimInf 9.1.0 (2022-06-08)","text":"CRAN release: 2022-06-08","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-1-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.1.0 (2022-06-08)","text":"Added new built-Susceptible-Infected-Susceptible model: SIS. Added functions update_u0 update_v0 update initial state model. Added pfilter function run bootstrap particle algorithm model. See documentation example.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-9-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 9.1.0 (2022-06-08)","text":"Fixed unnamed non-character argument ‘usr’ par() ploting density ABC posterior distribution.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-900-2022-04-20","dir":"Changelog","previous_headings":"","what":"SimInf 9.0.0 (2022-04-20)","title":"SimInf 9.0.0 (2022-04-20)","text":"CRAN release: 2022-04-20 release SimInf focuses primarily improving functionality performing Approximate Bayesian computation.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"breaking-changes-9-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"SimInf 9.0.0 (2022-04-20)","text":"Backwards incompatible changes reason major version incremented. Redesigned S4 class SimInf_abc interface using Approximate Bayesian Computation Sequential Monte Carlo (‘ABC-SMC’) algorithm, see documentation ‘abc’ function. Moreover, added functionality adaptively select sequence tolerances using algorithm ‘Adaptive Approximate Bayesian Computation Tolerance Selection’ Simola others (2021), Bayesian Analysis.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-9-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 9.0.0 (2022-04-20)","text":"Added function ‘n_generations’ determine number generations ‘SimInf_abc’ object.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-9-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 9.0.0 (2022-04-20)","text":"plot function SimInf_abc class now passes additional arguments ‘…’ underlying plot functions.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-840-2021-09-19","dir":"Changelog","previous_headings":"","what":"SimInf 8.4.0 (2021-09-19)","title":"SimInf 8.4.0 (2021-09-19)","text":"CRAN release: 2021-09-19","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-8-4-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 8.4.0 (2021-09-19)","text":"‘events’, ‘gdata’, ‘gdata<-’, ‘ldata’, ‘punchcard<-’, ‘select_matrix’, ‘select_matrix<-’ ‘shift_matrix’, ‘shift_matrix<-’ functions changed S4 methods.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-8-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 8.4.0 (2021-09-19)","text":"Protect integer overflow occur ‘punchcard’ method model many nodes, compartments time-points.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-832-2021-06-29","dir":"Changelog","previous_headings":"","what":"SimInf 8.3.2 (2021-06-29)","title":"SimInf 8.3.2 (2021-06-29)","text":"CRAN release: 2021-06-30","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-8-3-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 8.3.2 (2021-06-29)","text":"Updated build configuration script (‘src/Makevars.ucrt’) Windows UCRT fix installation failure CRAN introduced version 8.3.0. Thanks Tomas Kalibera providing patch. Improved test logic checks using multiple threads also check number available threads greater one running test using two threads. Thanks Tomas Kalibera reporting test failure CRAN r-devel-windows-x86_64-gcc10-UCRT machine using one thread.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-830-2021-06-24","dir":"Changelog","previous_headings":"","what":"SimInf 8.3.0 (2021-06-24)","title":"SimInf 8.3.0 (2021-06-24)","text":"CRAN release: 2021-06-25","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-8-3-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 8.3.0 (2021-06-24)","text":"Changed R dependency R(>= 4.0). Refactoring build configuration script Windows. Added functionality fit models time series data using Approximate Bayesian Computation Sequential Monte Carlo (‘ABC-SMC’) algorithm Toni others (2009) doi: 10.1098/rsif.2008.0172. Added vignette scheduled events. vignette work--progress yet complete.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-820-2020-12-06","dir":"Changelog","previous_headings":"","what":"SimInf 8.2.0 (2020-12-06)","title":"SimInf 8.2.0 (2020-12-06)","text":"CRAN release: 2020-12-06","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-8-2-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 8.2.0 (2020-12-06)","text":"Prevalence function: better handling condition prevalence formula. Use ‘Date’ x-axis plotting events time specified Date format. Return event ‘time’ Date ‘event’ type character coercing events ‘data.frame’ specified Date character.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-810-2020-10-18","dir":"Changelog","previous_headings":"","what":"SimInf 8.1.0 (2020-10-18)","title":"SimInf 8.1.0 (2020-10-18)","text":"CRAN release: 2020-10-18 release SimInf focuses primarily improving plotting trajectory data.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-8-1-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 8.1.0 (2020-10-18)","text":"plotting functionality improved allow visualisation prevalence using formula notation ‘prevalence’ function, see documentation. addition, box around plot removed legend moved top. prevalence function updated always return matrix format=‘matrix’. returned vector instead ‘1 x length(tspan)’ matrix level argument equal 1 2, level = 3 prevalence included one node .","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-800-2020-09-13","dir":"Changelog","previous_headings":"","what":"SimInf 8.0.0 (2020-09-13)","title":"SimInf 8.0.0 (2020-09-13)","text":"CRAN release: 2020-09-13 release SimInf includes improvements changes facilitate post-processing trajectory data future development package.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-8-0-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 8.0.0 (2020-09-13)","text":"Added ‘compartments’ ‘index’ arguments ‘boxplot’ ‘pairs’ plotting methods facilitate analysis simulated trajectory, see documentation. build configuration script improved identify OpenMP can used. also possible skip check OpenMP –disable-openmp specified installing package.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"breaking-changes-8-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"SimInf 8.0.0 (2020-09-13)","text":"Backwards incompatible changes reason major version incremented. ‘prevalence’ function changed S4 method. Moreover, ‘type’ character argument renamed ‘level’ changed integer argument. reason renaming ‘type’ argument prepare improvements plot function future display prevalence already argument called ‘type’. Additionally, ‘.’ argument renamed ‘format’ clarity. Finally, unused ‘…’ argument removed. See documentation examples. ‘trajectory’ function changed S4 method. Furthermore, node index argument renamed ‘node’ ‘index’ facilitate future development indices can also represent structures model. Additionally, ‘.’ argument renamed ‘format’ clarity. Finally, unused ‘…’ argument removed. See documentation examples. ‘Nn’ function determine number nodes model replaced S4 method ‘n_nodes’.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-701-2020-06-18","dir":"Changelog","previous_headings":"","what":"SimInf 7.0.1 (2020-06-18)","title":"SimInf 7.0.1 (2020-06-18)","text":"CRAN release: 2020-06-18","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-7-0-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 7.0.1 (2020-06-18)","text":"Removed timestamp first line C code generated ‘mparse’ order keep hash C-code constant, even code regenerated later time identical model. avoids re-compiling C-code model, source code already compiled.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-7-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 7.0.1 (2020-06-18)","text":"Fixed problem prevented re-compiling model C-code even though changed. Changed use ‘R_FINITE’ instead ‘isfinite’ internal C function ‘SimInf_print_status’","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-700-2020-05-23","dir":"Changelog","previous_headings":"","what":"SimInf 7.0.0 (2020-05-23)","title":"SimInf 7.0.0 (2020-05-23)","text":"CRAN release: 2020-05-23","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-or-improvements-7-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES OR IMPROVEMENTS","title":"SimInf 7.0.0 (2020-05-23)","text":"beta gamma parameters built-SIR model moved internally ‘gdata’ ‘ldata’ allow node specific parameter values. beta, gamma epsilon parameters built-SEIR model moved internally ‘gdata’ ‘ldata’ allow node specific parameter values. order reduce compilation-time running multiple simulations model contains C code, MD5 hash C code used determine model already compiled DLL loaded, thus compilation step can skipped running trajectory. C functions ‘SimInf_forward_euler_linear_decay’ ‘SimInf_local_spread’ now available called C code another package. values ‘E’ matrix now used weights sampling individuals exit, internal transfer external transfer events. individuals sampled, one one, without replacement compartments specified ‘E[, select]’ way probability particular individual sampled given draw proportional weight ‘E[, select]’. values ‘E’ matrix now used weights enter events. column ‘E[, select]’ contains several non-zero entries, compartment add individual sampled way probability proportional weight ‘E[, select]’. scheduled enter events can now use ‘proportion’ ‘n = 0’, see description breaking changes . Additionally, ‘shift’ feature can also used control compartments individuals added.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"breaking-changes-7-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"SimInf 7.0.0 (2020-05-23)","text":"Backwards incompatible changes reason major version incremented. Removed ‘run_outer’ function. Removed unused ‘threads’ argument ‘SimInf_run’ function (use ‘set_num_threads’ specify number threads). ‘SimInf_run’ function C function model calls simulate trajectory. change, model packages created previous version SimInf must modified/recreated work version SimInf. Events n = 0 utilize proportion instead calculate number individuals affected event. number previously calculated multiplying number individuals node proportion event. made tricky use proportion scheduled event proportion small large number individuals node small, since result always rounded 0 individuals small proportion individuals large proportion. replaced sampling binomial distribution determine number individuals affected event. Thanks Thomas Rosendal PR #28.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-651-2020-04-01","dir":"Changelog","previous_headings":"","what":"SimInf 6.5.1 (2020-04-01)","title":"SimInf 6.5.1 (2020-04-01)","text":"CRAN release: 2020-04-01","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-6-5-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 6.5.1 (2020-04-01)","text":"Fixed memory access error internal C code introduced recently released 6.5.0 version. Detected CRAN gcc-UBSAN tests (Undefined Behavior Sanitizer).","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-650-2020-03-29","dir":"Changelog","previous_headings":"","what":"SimInf 6.5.0 (2020-03-29)","title":"SimInf 6.5.0 (2020-03-29)","text":"CRAN release: 2020-03-29","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-6-5-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 6.5.0 (2020-03-29)","text":"’s now possible ‘tspan’ vector length one simulate one time-unit .e. [t, t+1). trajectory function ported C parallelized efficiently transform simulated data model data.frame. Static code analysis codebase performed using lintr package order improve code style, consistency readability. ’s now possible specify type plot drawn simulated data, see documentation. Better documentation SISe, SISe3, SISe_sp, SISe3_sp models.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-6-5-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 6.5.0 (2020-03-29)","text":"way specify number threads use parallelized functions changed fix specifying number threads affect SimInf packages using OpenMP. Use set_num_threads specify number threads, see documentation. still works pass number threads run() function, however, threads argument removed run() future release. Updated vignette use ‘set_num_threads’ function. avoid cluttering error message, name internal function generated error removed error message (use traceback print call stack last uncaught error). Additionally, error messages now ends . (full stop). Removed row column names internal matrices U V used anywhere code.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-6-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 6.5.0 (2020-03-29)","text":"Fix storing solution state vectors first time point simulated time passed first time point tspan.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-640-2019-11-12","dir":"Changelog","previous_headings":"","what":"SimInf 6.4.0 (2019-11-12)","title":"SimInf 6.4.0 (2019-11-12)","text":"CRAN release: 2019-11-11","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-6-4-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 6.4.0 (2019-11-12)","text":"Updated vignette, CITATION file added DOI JSS publication DESCRIPTION/Description. Renamed NEWS file NEWS.md changed use markdown format style.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fix-6-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"SimInf 6.4.0 (2019-11-12)","text":"Removed timestamp test avoid possible test failure.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-630-2019-05-26","dir":"Changelog","previous_headings":"","what":"SimInf 6.3.0 (2019-05-26)","title":"SimInf 6.3.0 (2019-05-26)","text":"CRAN release: 2019-05-26","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-6-3-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 6.3.0 (2019-05-26)","text":"prevalence function now supports additional condition formula specification control population include calculation, see documentation. now possible write C code snippet pts_fun argument mparse text string line breaks instead vector character lines. summary function model generated mparse functionality now includes propensity transition.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"breaking-changes-6-3-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"SimInf 6.3.0 (2019-05-26)","text":"Removed U<- V<- methods. Use new punchcard<- method instead, see documentation.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-6-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 6.3.0 (2019-05-26)","text":"Fix storing solution continuous state vector v time t, including t, t passed next time tspan. Fix link-type optimization type mismatch internal C function SimInf_ldata_sp (detected CRAN checks).","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-620-2018-11-20","dir":"Changelog","previous_headings":"","what":"SimInf 6.2.0 (2018-11-20)","title":"SimInf 6.2.0 (2018-11-20)","text":"CRAN release: 2018-11-20","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-6-2-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 6.2.0 (2018-11-20)","text":"mparse model builder functionality improved able generate models contain node specific local data continuous state variables. also possible pass C code post time step function mparse. See documentation. package skeleton method updated handle improved functionlity mparse. Print summary local data ldata matrix model row names. ’s now possible pass gdata, ldata v0 data.frames SimInf_model function. Better error message invalid rate negative state detected simulation.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-610-2018-08-13","dir":"Changelog","previous_headings":"","what":"SimInf 6.1.0 (2018-08-13)","title":"SimInf 6.1.0 (2018-08-13)","text":"CRAN release: 2018-08-13","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-6-1-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 6.1.0 (2018-08-13)","text":"Print better error message processing scheduleed events facilitate debugging. fixes vignette. Updated CITATION file.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-6-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 6.1.0 (2018-08-13)","text":"Fixed broken mparse example.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-600-2018-04-21","dir":"Changelog","previous_headings":"","what":"SimInf 6.0.0 (2018-04-21)","title":"SimInf 6.0.0 (2018-04-21)","text":"CRAN release: 2018-04-20","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-6-0-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 6.0.0 (2018-04-21)","text":"print summary methods improved include summary data model number individuals compartment. Added trajectory method facilitate post-processing simulation data. See documentation. event type, specifying scheduled events data.frame, can now coded either numerical value character string, see documentataion SimInf_events method. Now SimInf also includes Events Method (AEM) solver (Bauer P., Engblom S. (2015) Sensitivity Estimation Inverse Problems Spatial Stochastic Models Chemical Kinetics. : Abdulle ., Deparis S., Kressner D., Nobile F., Picasso M. (eds) Numerical Mathematics Advanced Applications - ENUMATH 2013. Lecture Notes Computational Science Engineering, vol 103. Springer, Cham. Doi: 10.1007/978-3-319-10705-9_51). core feature AEM solver reaction events carried channels access private streams random numbers, contrast Gillespie direct method one use one stream events. added new solver argument run method. package_skeleton method updated handle new solver argument. event type, specifying scheduled events data.frame, can now coded either numerical value character string, see documentataion SimInf_events method. Added utility function select_matrix get/set E matrix events slot SimInf_model object. Added utility function shift_matrix get/set N matrix events slot SimInf_model object. Added utility function gdata get/set parameters global data vector common nodes SimInf_model object. Added utility function ldata get local data vector node SimInf_model object.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"breaking-changes-6-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"SimInf 6.0.0 (2018-04-21)","text":"changed mparse method make even easier specify new model Siminf framework, see documentation. Removed following methods: U, V, recovered, susceptible, infected. Use new trajectory method instead, see documentation. Renamed type option bnp nop prevalence method calculate proportion nodes least one case. Removed seed argument run method. Use set.seed instead.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-510-2017-10-18","dir":"Changelog","previous_headings":"","what":"SimInf 5.1.0 (2017-10-18)","title":"SimInf 5.1.0 (2017-10-18)","text":"CRAN release: 2017-10-18","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-5-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 5.1.0 (2017-10-18)","text":"Added missing calls PROTECT protect newly created R objects C code garbage collector. Protect invalid transition index direct SSA.","code":""},{"path":[]},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-5-0-1","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 5.0.1","text":"Improvements vignette.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-500-2017-06-13","dir":"Changelog","previous_headings":"","what":"SimInf 5.0.0 (2017-06-13)","title":"SimInf 5.0.0 (2017-06-13)","text":"CRAN release: 2017-06-13","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"new-features-5-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SimInf 5.0.0 (2017-06-13)","text":"Added vignette provide technical description framework, use predefined model SimInf, demonstrate case study, finally show extend framework user defined model. Added pairs boxplot methods visualise number individuals compartment. Added spaghetti argument plot method draw one line node. Added method package_skeleton create package skeleton model depending SimInf.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-5-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 5.0.0 (2017-06-13)","text":"Renamed plot argument N.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-5-0-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 5.0.0 (2017-06-13)","text":"core solver now checks return value transition rate functions raise error return value non-finite less zero. Added example data (nodes) population 1600 nodes within 50 square kilometer region facilitate illustration various models.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-5-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 5.0.0 (2017-06-13)","text":"Added missing call PROTECT protect newly created matrices (R objects) garbage collector.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-400-2017-03-21","dir":"Changelog","previous_headings":"","what":"SimInf 4.0.0 (2017-03-21)","title":"SimInf 4.0.0 (2017-03-21)","text":"CRAN release: 2017-03-21","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"new-features-4-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SimInf 4.0.0 (2017-03-21)","text":"Added V U getter/setter methods SimInf_model. header file SimInf.h added folder inst/include enable LinkingTo: SimInf. call R_RegisterCCallable added make SimInf_run C routine available packages. slots U_sparse V_sparse added SimInf_model. slots U_sparse V_sparse holds result model initialized write solution sparse matrix. slot C_code added SimInf_model. Character vector optional model C code. non-empty, C code written temporary C-file run method called. temporary C-file compiled resulting DLL dynamically loaded. DLL unloaded temporary files removed running model. mparse model parser added. parser generates model matrices G S C code text string specification model, example, c(“S -> k1SI -> ”, “-> k2*-> R”) expresses SIR model. S4 class SimInf_mparse added support feature.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-4-0-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 4.0.0 (2017-03-21)","text":"Added model compartment names model u0 U matrices facilitate inspection data. Removed max node size constraint sampling individuals scheduled events two compartments (fixes issue #3). tspan vector argument siminf_model method can now either integer Date vector. Date vector internally coerced numeric vector days, tspan[1] becomes day year first year tspan argument. dates added names numeric vector. Improved plot methods adding colors increase line widths. Improved build configuration register native routines.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-4-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 4.0.0 (2017-03-21)","text":"S4 class siminf_model renamed SimInf_model. Copy u0 v0 first column U V, respectively. Prior change, state copied first time step.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-300-2017-01-29","dir":"Changelog","previous_headings":"","what":"SimInf 3.0.0 (2017-01-29)","title":"SimInf 3.0.0 (2017-01-29)","text":"CRAN release: 2017-01-29","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"new-features-3-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SimInf 3.0.0 (2017-01-29)","text":"Two new built-models: SIR SEIR.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-3-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 3.0.0 (2017-01-29)","text":"Removed sub-domain argument. Instead use local data vector ldata pass node specific data. Removed unused parameter epsilon SISe_sp SISe3_sp models. Refactoring local spread SISe_sp SISe3_sp models. Added parameter pointer random number generator post time step function.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-200-2016-05-04","dir":"Changelog","previous_headings":"","what":"SimInf 2.0.0 (2016-05-04)","title":"SimInf 2.0.0 (2016-05-04)","text":"CRAN release: 2016-05-04","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"SimInf 2.0.0 (2016-05-04)","text":"Two new built-models: SISe_sp SISe3_sp spatial coupling. Added run_outer method run model scaled gdata parameters.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"improvements-2-0-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"SimInf 2.0.0 (2016-05-04)","text":"Added two synthetic datasets u0_SISe3 events_SISe3 demonstrate use SimInf. Several improvements documentation. Added summary method siminf_model class scheduled_events class.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"changes-2-0-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"SimInf 2.0.0 (2016-05-04)","text":"slot N scheduled_events changed dgCMatrix matrix. Refactoring show method siminf_model class scheduled_events class. Renamed function prototype PostTimeStepFun PTSFun PropensityFun TRFun. Renamed init argument u0 SISe SISe3 methods. Changed node, dest, select shift one-based indices scheduled_events.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"SimInf 2.0.0 (2016-05-04)","text":"Changed use gsl_rng_uniform_pos instead gsl_rng_uniform avoid 0 direct SSA. zero randomly selected first compartment empty, simulator enter negative state.","code":""},{"path":"http://stewid.github.io/SimInf/news/index.html","id":"siminf-100-2016-01-08","dir":"Changelog","previous_headings":"","what":"SimInf 1.0.0 (2016-01-08)","title":"SimInf 1.0.0 (2016-01-08)","text":"CRAN release: 2016-01-08 First release.","code":""}]
